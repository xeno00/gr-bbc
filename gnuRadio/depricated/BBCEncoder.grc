options:
  parameters:
    author: James Morrison
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: hb
    hier_block_src_path: '.:'
    id: BBCEncoder
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: BBC Encoder
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 12.0]
    rotation: 0
    state: enabled

blocks:
- name: blocks_stream_to_vector_0_1
  id: blocks_stream_to_vector
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: message_length
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [184, 184.0]
    rotation: 0
    state: enabled
- name: blocks_vector_to_stream_1_1
  id: blocks_vector_to_stream
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: codeword_length
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [536, 184.0]
    rotation: 0
    state: enabled
- name: codeword_length
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: ''
    short_id: ''
    type: ''
    value: int(2**17)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [312, 12.0]
    rotation: 0
    state: true
- name: epy_block_2_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nE N C O D E R\n\"\"\"\n#import sys\nimport numpy as np\n\
      from gnuradio import gr\nfrom gnuradio import grc\nimport inspect\nDEFAULT_CHECKSUM\
      \ = 0\n\n\n\n\nclass blk(gr.sync_block):\n    \n    def __init__(self, msg_len=2**7,\
      \ cod_len=2**17):\n        #msg_len = get_top_variable(\"message_length\", default=2**7)\n\
      \        #cod_len = get_top_variable(\"codeword_length\", default=2**17)\n \
      \       \n        gr.sync_block.__init__(self,\n            name='BBC Encoder',\n\
      \            in_sig=[(np.byte,  msg_len if isinstance(msg_len, int) else int(msg_len))],\
      \    \n            out_sig=[(np.byte, cod_len if isinstance(cod_len, int) else\
      \ int(cod_len))]\n        )\n        # Convert from Bytes to bits\n        self.myEncoder\
      \ = Encoder(msg_len*8, cod_len*8)\n    \n    \n    # Use BBC to encode the incoming\
      \ message vectors\n    def work(self, input_items, output_items):\n        result\
      \ = self.myEncoder.encode(input_items[0][:][:])\n        \n        try:\n  \
      \          output_items[0][:][:] = result\n            return len(output_items[0])\n\
      \        except:\n            print(\"DEBUG encoder line 31: output typing failed.\\\
      n\")\n            print(\"Type of encoder result: \", type(result))\n      \
      \      print(\"Type of stream: \", type(self.out_sig))\n    \n###############################################################################\n\
      class Encoder:\n    def __init__(self, msg_len, cod_len):\n        self.shift_register\
      \ = self.init_shift_register()\n        self.msg_len = msg_len\n        self.cod_len\
      \ = cod_len\n\n    def init_shift_register(self):\n        shift_register =\
      \ [0 for i in range(32)]\n        init(shift_register)\n        return (shift_register)\n\
      \n    def parse_input(self, my_input):\n        message = bytearray(my_input.tobytes())\n\
      \        #TODO: add error exception for wrong sized input vector\n        return\
      \ message\n\n    def encode(self, input):\n        message = self.parse_input(input)\n\
      \        codeword = bytearray(int(self.cod_len/8))\n        \n        for i\
      \ in range(self.msg_len):\n            element = memoryview(message)[int((i-i%8)/8)]\n\
      \            bit = ((element) >> (i%8)) & 0b1\n            mark_loc = add_bit(bit,\
      \ self.shift_register) % self.cod_len\n            memoryview(codeword)[int((mark_loc-mark_loc%8)/8)]\
      \ |= (1<<(mark_loc%8))\n            # TODO: add + vs | change to python library\n\
      \        return(codeword)\n        \n ##############################################################################\n\
      MAX_VAL = 0xffffffffffffffff\nglobal n\nn = 0       \ndef add_bit(b, s):\n \
      \   global n\n    t = (s[n % 32]^(0xffffffff if b else 0)) &MAX_VAL\n    t =\
      \ ((t|(t>>1)) ^ ((t<<1)&MAX_VAL))&MAX_VAL     # Have to enforce 64 bit condition\
      \ on left shift     \n    t = (t ^ (t>>4) ^ (t>>8) ^ (t>>16) ^ (t>>32)) & MAX_VAL\n\
      \    n += 1                           \n    s[n % 32] ^= (t&MAX_VAL)  #s[(n)\
      \ % 32] ^= t, modified to reflect n change\n    return s[n % 32]        #return\
      \ s[(n) % 32], modified to reflect n change                      \n\ndef del_bit(b,\
      \ s):\n    global n\n    n -= 1\n    add_bit(b,s), \n    n -= 1\n    return\
      \ s[n % 32]\n    \ndef init(s):\n    global n\n    n = 0\n    h = 1\n    for\
      \ i in range(32):\n        s[i]=0\n    for i in range(4096):\n        h=add_bit(h&1,\
      \ s)\n    n = 0    \n###############################################################################\n\
      \ndef get_top_variable(variable_name=\"\", default=None):\n    '''\n    Returns\
      \ the value of a variable from the flow graph.\n    '''\n    ## Run Condition:\
      \ GNURadio is starting the flowgraph, resulting output comes from here when\
      \ working\n    top = inspect.currentframe().f_back.f_back.f_locals\n    try:\n\
      \        # Check if top has the variable name we're looking for\n        if\
      \ top.__contains__(variable_name):\n            #print(f\"[Block Debug 1] While\
      \ starting, I found top variable \\'{variable_name}\\': type={type(top[variable_name])},\
      \ value={top[variable_name]}\")\n            return top[variable_name]\n   \
      \ finally:\n        del top\n\n    ## Run Condition: Saving the flowgraph, necessary\
      \ when default case isnt correct\n    top = inspect.currentframe().f_back.f_back.f_back.f_back.f_back.f_locals\n\
      \    try:\n        # Make sure top has 'self'\n        if top.__contains__(\"\
      self\") and \\\n                (isinstance(top['self'], grc.gui.canvas.flowgraph.FlowGraph))\
      \ and \\\n                (hasattr(top['self'], 'blocks')):\n\n            #\
      \ Get a list of all blocks\n            block_names = [block.name for block\
      \ in top['self'].blocks]\n\n            # Find the index to the variable we\
      \ need\n            block_index = block_names.index(variable_name)\n       \
      \     \n            # Return result\n            result = top['self'].blocks[block_index].params['value'].value\n\
      \            print(f\"[Block Debug 2] While modifying the flowgraph, I found\
      \ top variable \\'{variable_name}\\': type={type(result)}, value={result}\"\
      )\n            return result\n\n    finally:\n        del top\n\n    print(\"\
      returining default vaule\")\n    return default\n"
    affinity: ''
    alias: ''
    cod_len: '131072'
    comment: 'BBC Requires vectors

      for operation'
    maxoutbuf: '0'
    minoutbuf: '0'
    msg_len: '128'
  states:
    _io_cache: ('BBC Encoder', 'blk', [('msg_len', '128'), ('cod_len', '131072')],
      [('0', 'byte', 128)], [('0', 'byte', 131072)], '', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [360, 172.0]
    rotation: 0
    state: enabled
- name: message_length
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: ''
    short_id: ''
    type: ''
    value: int(2**7)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [192, 12.0]
    rotation: 0
    state: true
- name: pad_sink_0
  id: pad_sink
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    label: out
    num_streams: '1'
    optional: 'False'
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [712, 180.0]
    rotation: 0
    state: true
- name: pad_source_0
  id: pad_source
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    label: in
    maxoutbuf: '0'
    minoutbuf: '0'
    num_streams: '1'
    optional: 'False'
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [40, 180.0]
    rotation: 0
    state: true

connections:
- [blocks_stream_to_vector_0_1, '0', epy_block_2_0, '0']
- [blocks_vector_to_stream_1_1, '0', pad_sink_0, '0']
- [epy_block_2_0, '0', blocks_vector_to_stream_1_1, '0']
- [pad_source_0, '0', blocks_stream_to_vector_0_1, '0']

metadata:
  file_format: 1
  grc_version: 3.10.3.0
