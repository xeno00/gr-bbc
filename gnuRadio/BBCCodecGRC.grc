options:
  parameters:
    author: James Morrison
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: BBCCodecMaster
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: BBCCodec
    window_size: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: CODEWORD_LENGTH
  id: variable
  parameters:
    comment: 'Subtract 3 since in Bytes

      131072 = 2**17

      512 = 2**9'
    value: '131072'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [192, 12.0]
    rotation: 0
    state: true
- name: MESSAGE_LENGTH
  id: variable
  parameters:
    comment: 'Subtract 3 since in Bytes

      128 = 2**7

      8 = 2**3'
    value: '128'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [360, 12.0]
    rotation: 0
    state: true
- name: message
  id: variable
  parameters:
    comment: ''
    value: '"HELLO WORLD! Welcome to BBC in GNURadio. This is a jam-resistant codec,
      and we are sending messages, encoding them, and then try"'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 204.0]
    rotation: 0
    state: enabled
- name: blocks_stream_to_vector_0
  id: blocks_stream_to_vector
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: MESSAGE_LENGTH
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [416, 280.0]
    rotation: 0
    state: true
- name: blocks_stream_to_vector_0_0
  id: blocks_stream_to_vector
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: CODEWORD_LENGTH
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [416, 408.0]
    rotation: 0
    state: true
- name: blocks_tag_debug_0
  id: blocks_tag_debug
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    display: 'True'
    filter: '""'
    name: ''
    num_inputs: '1'
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [416, 204.0]
    rotation: 0
    state: true
- name: blocks_throttle_0
  id: blocks_throttle
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    ignoretag: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_second: '32000'
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [216, 276.0]
    rotation: 0
    state: true
- name: blocks_vector_source_x_0_0
  id: blocks_vector_source_x
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    repeat: 'False'
    tags: '[]'
    type: byte
    vector: '[ord(i) for i in message]'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 260.0]
    rotation: 0
    state: true
- name: blocks_vector_to_stream_1
  id: blocks_vector_to_stream
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: CODEWORD_LENGTH
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [824, 280.0]
    rotation: 0
    state: true
- name: blocks_vector_to_stream_1_0
  id: blocks_vector_to_stream
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: MESSAGE_LENGTH
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [824, 408.0]
    rotation: 0
    state: true
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nD E C O D E R\n\"\"\"\nimport sys\nimport numpy as np\n\
      from gnuradio import gr\nfrom gnuradio import grc\nimport inspect\nDEFAULT_CHECKSUM\
      \ = 0\n#TODO: REMOVE FIRST HANDLING TO MAKE VERSATILE\nglobal first\nfirst =\
      \ True\n\nclass blk(gr.sync_block):\n\n    def __init__(self, msg_len=2**7,\
      \ cod_len=2**17):\n        msg_len = get_top_variable(\"MESSAGE_LENGTH\", default=msg_len)\n\
      \        cod_len = get_top_variable(\"CODEWORD_LENGTH\", default=cod_len)\n\
      \        \n        gr.sync_block.__init__(self,\n            name='BBC Decoder',\n\
      \            in_sig=[(np.byte,  cod_len if isinstance(cod_len, int) else int(cod_len))],\n\
      \            out_sig=[(np.byte, msg_len if isinstance(msg_len, int) else int(msg_len))]\n\
      \        )\n        # Convert from Bytes to bits\n        self.myDecoder = Decoder(msg_len*8,\
      \ cod_len*8)\n        sys.setrecursionlimit((msg_len+1)*8)\n\n    # Use BBC\
      \ to decode the incoming codeword vectors\n    def work(self, input_items, output_items):\n\
      \        result = self.myDecoder.decode(input_items[0][:][:])\n        #TODO:\
      \ add function to iteratively push results out\n        try:\n            output_items[0][:][:]\
      \ = bytearray(result[0].encode())\n            return len(output_items[0])\n\
      \        except:\n            print(\"DEBUG decoder line 33: output typing failed.\\\
      n\")\n            print(\"Type of decoder result: \", type(bytearray(result[0].encode())))\n\
      \            print(\"Type of stream: \", type(self.out_sig))\n\n###############################################################################\n\
      class Decoder:\n    def __init__(self, msg_len, cod_len):\n        self.message_list\
      \ = []\n        self.num_checksum = DEFAULT_CHECKSUM\n        self.shift_register\
      \ = self.init_shift_register()\n        self.msg_len = msg_len\n        self.cod_len\
      \ = cod_len\n\n    def init_shift_register(self):\n        shift_register =\
      \ [0 for i in range(32)]\n        init(shift_register)\n        return (shift_register)\n\
      \    \n    def decode(self, codeword):\n        codeword = bytearray(codeword.tobytes())\
      \ #added for GRC implementation\n        global first\n        if(first):\n\
      \            first = False\n            self.message_list = []\n           \
      \ message = bytearray(int(self.msg_len/8))\n            self._decode_BBC_recursive(message,\
      \ codeword, 0) # make the first recursive call to decode\n            print(\"\
      Message list- decoder--\\n\", str(self.message_list))\n            return self.message_list\n\
      \    \n    def _decode_BBC_recursive(self, message, codeword, index):\n    \
      \    # BASE CASE\n        if index == (self.msg_len-1):\n            self.message_list.append(bytes(memoryview(message)[0:self.msg_len-1-self.num_checksum]).decode(encoding='ascii'))\n\
      \            \n        # assuming the next message bit is a 0, check for a mark\
      \ in the codeword\n        else:\n            val = (add_bit(0, self.shift_register)\
      \ % (self.cod_len))\n            bit = ((memoryview(codeword)[int((val-val%8)/8)])>>(val%8))&\
      \ 0b1\n            if bit == 1: #TODO\n                try:\n              \
      \      self._decode_BBC_recursive(message, codeword, index+1)\n            \
      \    except:\n                    print(\"Line 68. Recursion max length reached.\
      \ current message: \", str(message), \"Length at error = \", str(index)) #DEBUG\n\
      \            del_bit(0, self.shift_register)\n\n            # assuming the next\
      \ message bit is a 1, check for a mark in the codeword\n            val = (add_bit(1,\
      \ self.shift_register) % (self.cod_len))\n            bit =  (memoryview(codeword)[int((val-val%8)/8)]>>(val%8))&\
      \ 0b1\n            if bit == 1: #(1<<val) == (codeword & (1<<val)):\n      \
      \          memoryview(message)[int((index-index%8)/8)] |= (1<<index%8)\n   \
      \             try:\n                    self._decode_BBC_recursive(message,\
      \ codeword, index+1)\n                    memoryview(message)[int((index-index%8)/8)]\
      \ &= (0xff ^ (1<<index%8)) #set one bit low\n                except:\n     \
      \               print(\"Line 79. Recursion max length reached. current message:\
      \ \", str(message), \"Length at error = \", str(index)) #DEBUG\n           \
      \ del_bit(1, self.shift_register)\n\n###############################################################################\n\
      MAX_VAL = 0xffffffffffffffff\nglobal n\nn = 0       \ndef add_bit(b, s):\n \
      \   global n\n    t = (s[n % 32]^(0xffffffff if b else 0)) &MAX_VAL\n    t =\
      \ ((t|(t>>1)) ^ ((t<<1)&MAX_VAL))&MAX_VAL     # Have to enforce 64 bit condition\
      \ on left shift     \n    t = (t ^ (t>>4) ^ (t>>8) ^ (t>>16) ^ (t>>32)) & MAX_VAL\n\
      \    n += 1                           \n    s[n % 32] ^= (t&MAX_VAL)  #s[(n)\
      \ % 32] ^= t, modified to reflect n change\n    return s[n % 32]    #return\
      \ s[(n) % 32], modified to reflect n change                      \n\ndef del_bit(b,\
      \ s):\n    global n\n    n -= 1\n    add_bit(b,s), \n    n -= 1\n    return\
      \ s[n % 32]\n    \ndef init(s):\n    global n\n    n = 0\n    h = 1\n    for\
      \ i in range(32):\n        s[i]=0\n    for i in range(4096):\n        h=add_bit(h&1,\
      \ s)\n    n = 0    \n\n###############################################################################\n\
      \    \ndef get_top_variable(variable_name=\"\", default=None):\n    '''\n  \
      \  Returns the value of a variable from the flow graph.\n    '''\n\n    # Let's\
      \ go!\n    try:\n        ## Run Condition: GNURadio is starting the flowgraph\n\
      \        top = inspect.currentframe().f_back.f_back.f_locals\n\n        # Check\
      \ if top has the variable name we're looking for\n        if top.__contains__(variable_name):\n\
      \n            # Let the user know we found the variable\n            print(f\"\
      [Block Debug] While starting, I found top variable \\'{variable_name}\\': type={type(top[variable_name])},\
      \ value={top[variable_name]}\")\n\n            # Return the value of the variable\
      \ name\n            return top[variable_name]\n\n        ## Run Condition: Saving\
      \ the flowgraph\n        top = inspect.currentframe().f_back.f_back.f_back.f_back.f_back.f_locals\n\
      \n        # Make sure top has 'self'\n        if top.__contains__(\"self\")\
      \ and \\\n                (isinstance(top['self'], grc.gui.canvas.flowgraph.FlowGraph))\
      \ and \\\n                (hasattr(top['self'], 'blocks')):\n\n            #\
      \ Get a list of all blocks\n            block_names = [block.name for block\
      \ in top['self'].blocks]\n\n            # Find the index to the variable we\
      \ need\n            block_index = block_names.index(variable_name)\n\n     \
      \       # Store the result\n            result = top['self'].blocks[block_index].params['value'].value\n\
      \n            # Let the user know we found the variable\n            print(f\"\
      [Block Debug] While modifying the flowgraph, I found top variable \\'{variable_name}\\\
      ': type={type(result)}, value={result}\")\n\n            # Return the value\
      \ of the variable we found\n            return result\n\n    # Something went\
      \ wrong\n    except Exception as e:\n        print(\"[Block Debug]: Threw an\
      \ exception\", str(e))\n    except:\n        print(\"[Block Debug]: Threw an\
      \ unknown exception.\")\n\n    # Return the default result\n    return default"
    affinity: ''
    alias: ''
    cod_len: CODEWORD_LENGTH
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    msg_len: MESSAGE_LENGTH
  states:
    _io_cache: ('BBC Decoder', 'blk', [('msg_len', '128'), ('cod_len', '131072')],
      [('0', 'byte', 131072)], [('0', 'byte', 128)], '', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [616, 396.0]
    rotation: 0
    state: true
- name: epy_block_2
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nE N C O D E R\n\"\"\"\n#import sys\nimport numpy as np\n\
      from gnuradio import gr\nfrom gnuradio import grc\nimport inspect\nDEFAULT_CHECKSUM\
      \ = 0\n\n\n\n\nclass blk(gr.sync_block):\n    \n    def __init__(self, msg_len=2**7,\
      \ cod_len=2**17):\n        msg_len = get_top_variable(\"MESSAGE_LENGTH\", default=msg_len)\n\
      \        cod_len = get_top_variable(\"CODEWORD_LENGTH\", default=cod_len)\n\
      \        \n        gr.sync_block.__init__(self,\n            name='BBC Encoder',\n\
      \            in_sig=[(np.byte,  msg_len if isinstance(msg_len, int) else int(msg_len))],\
      \    \n            out_sig=[(np.byte, cod_len if isinstance(cod_len, int) else\
      \ int(cod_len))]\n        )\n        # Convert from Bytes to bits\n        self.myEncoder\
      \ = Encoder(msg_len*8, cod_len*8)\n    \n    \n    # Use BBC to encode the incoming\
      \ message vectors\n    def work(self, input_items, output_items):\n        result\
      \ = self.myEncoder.encode(input_items[0][:][:])\n        \n        try:\n  \
      \          output_items[0][:][:] = result\n            return len(output_items[0])\n\
      \        except:\n            print(\"DEBUG encoder line 31: output typing failed.\\\
      n\")\n            print(\"Type of encoder result: \", type(result))\n      \
      \      print(\"Type of stream: \", type(self.out_sig))\n    \n###############################################################################\n\
      class Encoder:\n    def __init__(self, msg_len, cod_len):\n        self.shift_register\
      \ = self.init_shift_register()\n        self.msg_len = msg_len\n        self.cod_len\
      \ = cod_len\n\n    def init_shift_register(self):\n        shift_register =\
      \ [0 for i in range(32)]\n        init(shift_register)\n        return (shift_register)\n\
      \n    def parse_input(self, my_input):\n        message = bytearray(my_input.tobytes())\n\
      \        #TODO: add error exception for wrong sized input vector\n        return\
      \ message\n\n    def encode(self, input):\n        message = self.parse_input(input)\n\
      \        codeword = bytearray(int(self.cod_len/8))\n        \n        for i\
      \ in range(self.msg_len):\n            element = memoryview(message)[int((i-i%8)/8)]\n\
      \            bit = ((element) >> (i%8)) & 0b1\n            mark_loc = add_bit(bit,\
      \ self.shift_register) % self.cod_len\n            memoryview(codeword)[int((mark_loc-mark_loc%8)/8)]\
      \ |= (1<<(mark_loc%8))\n            # TODO: add + vs | change to python library\n\
      \        return(codeword)\n        \n ##############################################################################\n\
      MAX_VAL = 0xffffffffffffffff\nglobal n\nn = 0       \ndef add_bit(b, s):\n \
      \   global n\n    t = (s[n % 32]^(0xffffffff if b else 0)) &MAX_VAL\n    t =\
      \ ((t|(t>>1)) ^ ((t<<1)&MAX_VAL))&MAX_VAL     # Have to enforce 64 bit condition\
      \ on left shift     \n    t = (t ^ (t>>4) ^ (t>>8) ^ (t>>16) ^ (t>>32)) & MAX_VAL\n\
      \    n += 1                           \n    s[n % 32] ^= (t&MAX_VAL)  #s[(n)\
      \ % 32] ^= t, modified to reflect n change\n    return s[n % 32]        #return\
      \ s[(n) % 32], modified to reflect n change                      \n\ndef del_bit(b,\
      \ s):\n    global n\n    n -= 1\n    add_bit(b,s), \n    n -= 1\n    return\
      \ s[n % 32]\n    \ndef init(s):\n    global n\n    n = 0\n    h = 1\n    for\
      \ i in range(32):\n        s[i]=0\n    for i in range(4096):\n        h=add_bit(h&1,\
      \ s)\n    n = 0    \n###############################################################################\n\
      \ndef get_top_variable(variable_name=\"\", default=None):\n    '''\n    Returns\
      \ the value of a variable from the flow graph.\n    '''\n\n    # Let's go!\n\
      \    try:\n        ## Run Condition: GNURadio is starting the flowgraph\n  \
      \      top = inspect.currentframe().f_back.f_back.f_locals\n\n        # Check\
      \ if top has the variable name we're looking for\n        if top.__contains__(variable_name):\n\
      \n            # Let the user know we found the variable\n            print(f\"\
      [Block Debug] While starting, I found top variable \\'{variable_name}\\': type={type(top[variable_name])},\
      \ value={top[variable_name]}\")\n\n            # Return the value of the variable\
      \ name\n            return top[variable_name]\n\n        ## Run Condition: Saving\
      \ the flowgraph\n        top = inspect.currentframe().f_back.f_back.f_back.f_back.f_back.f_locals\n\
      \n        # Make sure top has 'self'\n        if top.__contains__(\"self\")\
      \ and \\\n                (isinstance(top['self'], grc.gui.canvas.flowgraph.FlowGraph))\
      \ and \\\n                (hasattr(top['self'], 'blocks')):\n\n            #\
      \ Get a list of all blocks\n            block_names = [block.name for block\
      \ in top['self'].blocks]\n\n            # Find the index to the variable we\
      \ need\n            block_index = block_names.index(variable_name)\n\n     \
      \       # Store the result\n            result = top['self'].blocks[block_index].params['value'].value\n\
      \n            # Let the user know we found the variable\n            print(f\"\
      [Block Debug] While modifying the flowgraph, I found top variable \\'{variable_name}\\\
      ': type={type(result)}, value={result}\")\n\n            # Return the value\
      \ of the variable we found\n            return result\n\n    # Something went\
      \ wrong\n    except Exception as e:\n        print(\"[Block Debug]: Threw an\
      \ exception\", e)\n    except:\n        print(\"[Block Debug]: Threw an unknown\
      \ exception.\")\n\n    # Return the default result\n    return default"
    affinity: ''
    alias: ''
    cod_len: CODEWORD_LENGTH
    comment: 'BBC Requires vectors

      for operation'
    maxoutbuf: '0'
    minoutbuf: '0'
    msg_len: MESSAGE_LENGTH
  states:
    _io_cache: ('BBC Encoder', 'blk', [('msg_len', '128'), ('cod_len', '131072')],
      [('0', 'byte', 128)], [('0', 'byte', 131072)], '', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [616, 268.0]
    rotation: 0
    state: enabled
- name: import_0
  id: import
  parameters:
    alias: ''
    comment: ''
    imports: import glowworm.py
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [512, 12.0]
    rotation: 0
    state: disabled
- name: virtual_sink_1
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: bytes
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1032, 276.0]
    rotation: 0
    state: enabled
- name: virtual_source_0
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: bytes
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 404.0]
    rotation: 0
    state: true
- name: zeromq_push_sink_0
  id: zeromq_push_sink
  parameters:
    address: '"tcp://127.0.0.1:5557"'
    affinity: ''
    alias: ''
    comment: ''
    hwm: '-1'
    pass_tags: 'False'
    timeout: '100'
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1032, 388.0]
    rotation: 0
    state: enabled

connections:
- [blocks_stream_to_vector_0, '0', epy_block_2, '0']
- [blocks_stream_to_vector_0_0, '0', epy_block_0, '0']
- [blocks_throttle_0, '0', blocks_stream_to_vector_0, '0']
- [blocks_throttle_0, '0', blocks_tag_debug_0, '0']
- [blocks_vector_source_x_0_0, '0', blocks_throttle_0, '0']
- [blocks_vector_to_stream_1, '0', virtual_sink_1, '0']
- [blocks_vector_to_stream_1_0, '0', zeromq_push_sink_0, '0']
- [epy_block_0, '0', blocks_vector_to_stream_1_0, '0']
- [epy_block_2, '0', blocks_vector_to_stream_1, '0']
- [virtual_source_0, '0', blocks_stream_to_vector_0_0, '0']

metadata:
  file_format: 1
  grc_version: 3.10.3.0
