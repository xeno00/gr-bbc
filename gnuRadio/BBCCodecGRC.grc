options:
  parameters:
    author: James Morrison
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: BBCCodecMaster
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: BBCCodec
    window_size: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: CODEWORD_LENGTH
  id: variable
  parameters:
    comment: 'Must write as int

      Subtract 3 from exponent

      since in Bytes

      131072 = 2**17

      512 = 2**9'
    value: '131072'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [192, 12.0]
    rotation: 0
    state: true
- name: MESSAGE_LENGTH
  id: variable
  parameters:
    comment: 'Must write as int

      Subtract 3 from exponent

      since in Bytes

      128 = 2**7

      8 = 2**3'
    value: '128'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [360, 12.0]
    rotation: 0
    state: true
- name: message1
  id: variable
  parameters:
    comment: ''
    value: '"HELLO WORLD! Welcome to BBC in GNURadio. This is a jam-resistant codec,
      and we are sending messages, encoding them, and then try"'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 276.0]
    rotation: 0
    state: enabled
- name: message2
  id: variable
  parameters:
    comment: ''
    value: '"ZELLO ZORLD! Zelcome zo ZBC zn ZNURadio. Zhis zs z zam-zesistant zodec,
      znd ze zre zending zessages, zncoding zhem, znd zhen zry"'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 132.0]
    rotation: 0
    state: enabled
- name: blocks_or_xx_0
  id: blocks_or_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: byte
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [936, 256.0]
    rotation: 0
    state: true
- name: blocks_stream_to_vector_0
  id: blocks_stream_to_vector
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: MESSAGE_LENGTH
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [416, 352.0]
    rotation: 0
    state: enabled
- name: blocks_stream_to_vector_0_0
  id: blocks_stream_to_vector
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: CODEWORD_LENGTH
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [416, 480.0]
    rotation: 0
    state: true
- name: blocks_stream_to_vector_0_1
  id: blocks_stream_to_vector
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: MESSAGE_LENGTH
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [416, 208.0]
    rotation: 0
    state: true
- name: blocks_tag_debug_0
  id: blocks_tag_debug
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    display: 'True'
    filter: '""'
    name: ''
    num_inputs: '1'
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [416, 276.0]
    rotation: 0
    state: enabled
- name: blocks_tag_debug_0_0
  id: blocks_tag_debug
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    display: 'True'
    filter: '""'
    name: ''
    num_inputs: '1'
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [416, 140.0]
    rotation: 0
    state: true
- name: blocks_throttle_0
  id: blocks_throttle
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    ignoretag: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_second: '32000'
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [216, 348.0]
    rotation: 0
    state: enabled
- name: blocks_throttle_0_0
  id: blocks_throttle
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    ignoretag: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_second: '32000'
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [216, 204.0]
    rotation: 0
    state: true
- name: blocks_vector_source_x_0_0
  id: blocks_vector_source_x
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    repeat: 'False'
    tags: '[]'
    type: byte
    vector: '[ord(i) for i in message1]'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 332.0]
    rotation: 0
    state: enabled
- name: blocks_vector_source_x_0_0_0
  id: blocks_vector_source_x
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    repeat: 'False'
    tags: '[]'
    type: byte
    vector: '[ord(i) for i in message2]'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 188.0]
    rotation: 0
    state: true
- name: blocks_vector_to_stream_1
  id: blocks_vector_to_stream
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: CODEWORD_LENGTH
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [760, 352.0]
    rotation: 0
    state: true
- name: blocks_vector_to_stream_1_0
  id: blocks_vector_to_stream
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: MESSAGE_LENGTH
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [824, 480.0]
    rotation: 0
    state: true
- name: blocks_vector_to_stream_1_1
  id: blocks_vector_to_stream
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: CODEWORD_LENGTH
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [760, 208.0]
    rotation: 0
    state: true
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nD E C O D E R\n\"\"\"\n#import sys    #sys.setrecursionlimit((msg_len+1)*8)\
      \    after gr.sync_block.__init__()\nimport numpy as np\nfrom gnuradio import\
      \ gr\nfrom gnuradio import grc\nfrom math import ceil\nimport inspect\nDEFAULT_CHECKSUM\
      \ = 0\n#TODO: REMOVE FIRST HANDLING TO MAKE VERSATILE\nglobal first\nfirst =\
      \ True\n\nclass blk(gr.sync_block):\n\n    def __init__(self): #If there is\
      \ an error, change default here:\n        msg_len = get_top_variable(\"MESSAGE_LENGTH\"\
      , default=2**7)\n        cod_len = get_top_variable(\"CODEWORD_LENGTH\", default=2**17)\n\
      \        \n        gr.sync_block.__init__(self,\n            name='BBC Decoder',\n\
      \            in_sig=[(np.byte,  cod_len if isinstance(cod_len, int) else int(cod_len))],\n\
      \            out_sig=[(np.byte, msg_len if isinstance(msg_len, int) else int(msg_len))]\n\
      \        )\n        # Convert from Bytes to bits\n        self.myDecoder = Decoder(msg_len*8,\
      \ cod_len*8, DEFAULT_CHECKSUM) # Bytes to bits\n        #sys.setrecursionlimit((msg_len+1)*8)\n\
      \n    # Use BBC to decode the incoming codeword vectors\n    def work(self,\
      \ input_items, output_items):\n        result = self.myDecoder.decode(input_items[0][:][:][0])\n\
      \        #TODO: add function to iteratively push results out\n        try:\n\
      \            for x in result:\n                output_items[0][:][:] = bytearray(x)\n\
      \            return len(output_items[0])\n        except:\n            print(\"\
      DEBUG decoder line 33: output typing failed.\\n\")\n            print(\"Type\
      \ of decoder result: \", type(bytearray(result)))\n            print(\"Type\
      \ of stream: \", type(self.out_sig))\n\n###############################################################################\n\
      class Decoder:\n    def __init__(self, MSG_LEN, COD_LEN, CHK_LEN = 0):\n   \
      \     self.message_list = []\n        self.num_checksum = DEFAULT_CHECKSUM\n\
      \        self.shift_register = self.init_shift_register()\n        self.MSG_LEN\
      \ = MSG_LEN\n        self.COD_LEN = COD_LEN\n        self.CHK_LEN = CHK_LEN\
      \ #Is added to MSG_LEN, not subtracted from\n        self.n = 0\n\n    def init_shift_register(self):\n\
      \        shift_register = [0 for i in range(32)]\n        init(shift_register)\n\
      \        return (shift_register)\n\n    #DECODE ITERATIVELY\n    #Note that\
      \   D[n]   is the same as    memoryview(message)[int((self.n - self.n%8)/8)]\n\
      \    def decode(self, packet):\n        # Initialize variables\n        self.message_list\
      \ = []\n        message = bytearray(ceil((self.MSG_LEN + self.CHK_LEN)/8)) \
      \     #Bits to Bytes\n        #memoryview(message)[int((self.n - self.n%8)/8)]\
      \ = 1         # TODO: debug initialization for D[n]\n        \n        global\
      \ first\n        while first and True:\n            # Check for mark corresponding\
      \ to encoding D[n], beginning with a 0\n            prop_bit = (memoryview(message)[int((self.n\
      \ - self.n%8)/8)]>>(self.n%8)) & 0b1      # Find the proposed bit from previous\
      \ execution, aka D[n]\n            val = (add_bit(prop_bit, self.shift_register)\
      \ % (self.COD_LEN))                  # Mark location from glowworm\n       \
      \     bit = (memoryview(packet)[int((val-val%8)/8)]>>(val%8)) & 0b1        \
      \               # Logical AND to determine if present in packet/codeword\n\n\
      \            # If the mark is present... explore\n            if bit==1:\n \
      \               # message is complete, write to buffer\n                if self.n\
      \ == (self.MSG_LEN + self.CHK_LEN - 1):\n                    #print(message)\n\
      \                    self.message_list.append(bytes(memoryview(message)[0:self.MSG_LEN\
      \ - 1 - self.num_checksum]))\n                    bit = 0\n                \
      \    #TODO: Flow control statement?\n                    \n                #\
      \ message is incomplete, continue assuming next bit is 0\n                elif\
      \ self.n < (self.MSG_LEN + self.CHK_LEN - 1):\n                    self.n +=\
      \ 1\n                    memoryview(message)[int((self.n - self.n%8)/8)] &=\
      \ (0xff ^ (1<<self.n%8))\n                    continue\n                # In\
      \ case something bad happens\n                else:\n                    raise\
      \ Exception(\"107: Message completion led to over-indexing\")\n\n\n        \
      \    # If the mark is not present... backtrace\n            # Settle on an earlier\
      \ 0 to change it to a 1 and pursue that tree\n            if bit!=1:\n     \
      \           # delete checksum bits\n                while self.n >= self.MSG_LEN:\
      \ \n                    del_bit(0, self.shift_register)\n                  \
      \  self.n -= 1\n                    \n                # delete 1's until a 0\
      \ is encountered\n                while self.n >=0 and (((memoryview(message)[int((self.n\
      \ - self.n%8)/8)]>>(self.n%8)) & 0b1 )==1):\n                    del_bit(1,\
      \ self.shift_register)\n                    memoryview(message)[int((self.n\
      \ - self.n%8)/8)] &= (0xff ^ (1<<self.n%8))\n                    self.n -= 1\n\
      \                        \n                if self.n < 0: #Packet is fully decoded\n\
      \                    print(\"Packet is fully decoded. Still need to mplement\
      \ multiple messages in GRC (decoder)\")\n                    break #proceed\
      \ with next packet\n\n                else: # Move over to the 1 branch of current\
      \ search\n                    del_bit(0, self.shift_register)\n            \
      \        memoryview(message)[int((self.n - self.n%8)/8)] |= (1<<self.n%8)\n\
      \        first = False\n        for x in self.message_list:\n            print(x)\n\
      \        return self.message_list\n\n###############################################################################\n\
      MAX_VAL = 0xffffffffffffffff\nglobal n\nn = 0       \ndef add_bit(b, s):\n \
      \   global n\n    t = (s[n % 32]^(0xffffffff if b else 0)) &MAX_VAL\n    t =\
      \ ((t|(t>>1)) ^ ((t<<1)&MAX_VAL))&MAX_VAL     # Have to enforce 64 bit condition\
      \ on left shift     \n    t = (t ^ (t>>4) ^ (t>>8) ^ (t>>16) ^ (t>>32)) & MAX_VAL\n\
      \    n += 1                           \n    s[n % 32] ^= (t&MAX_VAL)  #s[(n)\
      \ % 32] ^= t, modified to reflect n change\n    return s[n % 32]    #return\
      \ s[(n) % 32], modified to reflect n change                      \n\ndef del_bit(b,\
      \ s):\n    global n\n    n -= 1\n    add_bit(b,s), \n    n -= 1\n    return\
      \ s[n % 32]\n    \ndef init(s):\n    global n\n    n = 0\n    h = 1\n    for\
      \ i in range(32):\n        s[i]=0\n    for i in range(4096):\n        h=add_bit(h&1,\
      \ s)\n    n = 0    \n\n###############################################################################\n\
      \    \ndef get_top_variable(variable_name=\"\", default=None):\n    '''\n  \
      \  Returns the value of a variable from the flow graph.\n    '''\n    ## Run\
      \ Condition: GNURadio is starting the flowgraph, resulting output comes from\
      \ here when working\n    top = inspect.currentframe().f_back.f_back.f_locals\n\
      \    try:\n        # Check if top has the variable name we're looking for\n\
      \        if top.__contains__(variable_name):\n            #print(f\"[Block Debug\
      \ 1] While starting, I found top variable \\'{variable_name}\\': type={type(top[variable_name])},\
      \ value={top[variable_name]}\")\n            return top[variable_name]\n   \
      \ finally:\n        del top\n        \n    ## Run Condition: Saving the flowgraph,\
      \ necessary when default case isnt correct. Removed return to fix error\n  \
      \  top = inspect.currentframe().f_back.f_back.f_back.f_back.f_back.f_locals\n\
      \    try:\n        # Make sure top has 'self'\n        if top.__contains__(\"\
      self\") and \\\n                (isinstance(top['self'], grc.gui.canvas.flowgraph.FlowGraph))\
      \ and \\\n                (hasattr(top['self'], 'blocks')):\n\n            #\
      \ Get a list of all blocks\n            block_names = [block.name for block\
      \ in top['self'].blocks]\n\n            # Find the index to the variable we\
      \ need\n            block_index = block_names.index(variable_name)\n       \
      \     \n            # Return result\n            result = top[\"self\"].blocks[block_index].params['value'].value\n\
      \            print(result)\n            #print(f\"[Block Debug 2] While modifying\
      \ the flowgraph, I found top variable \\'{variable_name}\\': type={type(result)},\
      \ value={result}\")\n            #return result\n        \n    finally:\n  \
      \      del top\n\n    print(\"returining default vaule\")\n    return default"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('BBC Decoder', 'blk', [], [('0', 'byte', 131072)], [('0', 'byte',
      128)], '', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [616, 480.0]
    rotation: 0
    state: true
- name: epy_block_1
  id: epy_block
  parameters:
    _source_code: "'''\nOR CODEWORD BLOCK\n'''\nimport numpy as np\nfrom gnuradio\
      \ import gr\nfrom gnuradio import grc\nimport inspect\n\n\nclass blk(gr.sync_block):\n\
      \n    def __init__(self):  # only default arguments here\n        cod_len =\
      \ get_top_variable(\"CODEWORD_LENGTH\", default=2**17)\n        \n        gr.sync_block.__init__(self,\n\
      \            name='OR Codeword',\n            in_sig=[(np.ubyte,  cod_len if\
      \ isinstance(cod_len, int) else int(cod_len)), \n                    (np.ubyte,\
      \  cod_len if isinstance(cod_len, int) else int(cod_len))],    #[np.complex64],\n\
      \            out_sig=[(np.ubyte, cod_len if isinstance(cod_len, int) else int(cod_len))]\n\
      \        )\n\n\n    def work(self, input_items, output_items):\n        #print(input_items[0][0])\
      \ gives list without extra binder\n        #print(input_items[1])  gives list\
      \ with extra binder\n        result = self.combine_codewords([input_items[1][0],\
      \ input_items[0][0]]) #output defaults to first argument, here.\n        #print(result)\n\
      \        print(\"Assigning result\")\n        print(result[37])\n        #output_items[0][:]\
      \ = input_items[0]    WORKS. Same error if input_items[0][0]\n        output_items[0][:]\
      \ = list(result)\n        print(\"final step\")\n        #return len(output_items[0])\
      \            WORKS\n        return len(output_items[0])\n\n    def combine_codewords(self,\
      \ words):\n        result = 0\n        #print(type(words[0][0][0]))\n      \
      \  print(\"decoding 0\")\n        cw1 = int.from_bytes(words[0],\"little\")\n\
      \        print(\"decoding 1\")\n        cw2 = int.from_bytes(words[1],\"little\"\
      )\n        #for x in words:\n        #    result |= int.from_bytes(x,\"little\"\
      )\n        print(\"combining...\")\n        result = cw1 |cw2\n        print(\"\
      encoding...\")\n        result = cw1.to_bytes(len(words[0]),\"little\")#result.to_bytes(len(words[0]),\"\
      little\")\n        print(\"returning...\")\n        return result\n\n\n###############################################################################\n\
      \ndef get_top_variable(variable_name=\"\", default=None):\n    '''\n    Returns\
      \ the value of a variable from the flow graph.\n    '''\n    ## Run Condition:\
      \ GNURadio is starting the flowgraph, resulting output comes from here when\
      \ working\n    top = inspect.currentframe().f_back.f_back.f_locals\n    try:\n\
      \        # Check if top has the variable name we're looking for\n        if\
      \ top.__contains__(variable_name):\n            #print(f\"[Block Debug 1] While\
      \ starting, I found top variable \\'{variable_name}\\': type={type(top[variable_name])},\
      \ value={top[variable_name]}\")\n            return top[variable_name]\n   \
      \ finally:\n        del top\n\n    ## Run Condition: Saving the flowgraph, necessary\
      \ when default case isnt correct\n    top = inspect.currentframe().f_back.f_back.f_back.f_back.f_back.f_locals\n\
      \    try:\n        # Make sure top has 'self'\n        if top.__contains__(\"\
      self\") and \\\n                (isinstance(top['self'], grc.gui.canvas.flowgraph.FlowGraph))\
      \ and \\\n                (hasattr(top['self'], 'blocks')):\n\n            #\
      \ Get a list of all blocks\n            block_names = [block.name for block\
      \ in top['self'].blocks]\n\n            # Find the index to the variable we\
      \ need\n            block_index = block_names.index(variable_name)\n       \
      \     \n            # Return result\n            result = top['self'].blocks[block_index].params['value'].value\n\
      \            print(f\"[Block Debug 2] While modifying the flowgraph, I found\
      \ top variable \\'{variable_name}\\': type={type(result)}, value={result}\"\
      )\n            return result\n\n    finally:\n        del top\n\n    print(\"\
      returining default vaule\")\n    return default"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('OR Codeword', 'blk', [], [('0', 'byte', 131072), ('1', 'byte', 131072)],
      [('0', 'byte', 131072)], '', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [704, 8.0]
    rotation: 0
    state: disabled
- name: epy_block_2
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nE N C O D E R\n\"\"\"\n#import sys\nimport numpy as np\n\
      from gnuradio import gr\nfrom gnuradio import grc\nimport inspect\nDEFAULT_CHECKSUM\
      \ = 0\n\n\n\n\nclass blk(gr.sync_block):\n    \n    def __init__(self):\n  \
      \      msg_len = get_top_variable(\"MESSAGE_LENGTH\", default=2**7)\n      \
      \  cod_len = get_top_variable(\"CODEWORD_LENGTH\", default=2**17)\n        \n\
      \        gr.sync_block.__init__(self,\n            name='BBC Encoder',\n   \
      \         in_sig=[(np.byte,  msg_len if isinstance(msg_len, int) else int(msg_len))],\
      \    \n            out_sig=[(np.byte, cod_len if isinstance(cod_len, int) else\
      \ int(cod_len))]\n        )\n        # Convert from Bytes to bits\n        self.myEncoder\
      \ = Encoder(msg_len*8, cod_len*8)\n    \n    \n    # Use BBC to encode the incoming\
      \ message vectors\n    def work(self, input_items, output_items):\n        result\
      \ = self.myEncoder.encode(input_items[0][:][:])\n        \n        try:\n  \
      \          output_items[0][:][:] = result\n            return len(output_items[0])\n\
      \        except:\n            print(\"DEBUG encoder line 31: output typing failed.\\\
      n\")\n            print(\"Type of encoder result: \", type(result))\n      \
      \      print(\"Type of stream: \", type(self.out_sig))\n    \n###############################################################################\n\
      class Encoder:\n    def __init__(self, msg_len, cod_len):\n        self.shift_register\
      \ = self.init_shift_register()\n        self.msg_len = msg_len\n        self.cod_len\
      \ = cod_len\n\n    def init_shift_register(self):\n        shift_register =\
      \ [0 for i in range(32)]\n        init(shift_register)\n        return (shift_register)\n\
      \n    def parse_input(self, my_input):\n        message = bytearray(my_input.tobytes())\n\
      \        #TODO: add error exception for wrong sized input vector\n        return\
      \ message\n\n    def encode(self, input):\n        message = self.parse_input(input)\n\
      \        codeword = bytearray(int(self.cod_len/8))\n        \n        for i\
      \ in range(self.msg_len):\n            element = memoryview(message)[int((i-i%8)/8)]\n\
      \            bit = ((element) >> (i%8)) & 0b1\n            mark_loc = add_bit(bit,\
      \ self.shift_register) % self.cod_len\n            memoryview(codeword)[int((mark_loc-mark_loc%8)/8)]\
      \ |= (1<<(mark_loc%8))\n            # TODO: add + vs | change to python library\n\
      \        return(codeword)\n        \n ##############################################################################\n\
      MAX_VAL = 0xffffffffffffffff\nglobal n\nn = 0       \ndef add_bit(b, s):\n \
      \   global n\n    t = (s[n % 32]^(0xffffffff if b else 0)) &MAX_VAL\n    t =\
      \ ((t|(t>>1)) ^ ((t<<1)&MAX_VAL))&MAX_VAL     # Have to enforce 64 bit condition\
      \ on left shift     \n    t = (t ^ (t>>4) ^ (t>>8) ^ (t>>16) ^ (t>>32)) & MAX_VAL\n\
      \    n += 1                           \n    s[n % 32] ^= (t&MAX_VAL)  #s[(n)\
      \ % 32] ^= t, modified to reflect n change\n    return s[n % 32]        #return\
      \ s[(n) % 32], modified to reflect n change                      \n\ndef del_bit(b,\
      \ s):\n    global n\n    n -= 1\n    add_bit(b,s), \n    n -= 1\n    return\
      \ s[n % 32]\n    \ndef init(s):\n    global n\n    n = 0\n    h = 1\n    for\
      \ i in range(32):\n        s[i]=0\n    for i in range(4096):\n        h=add_bit(h&1,\
      \ s)\n    n = 0    \n###############################################################################\n\
      \ndef get_top_variable(variable_name=\"\", default=None):\n    '''\n    Returns\
      \ the value of a variable from the flow graph.\n    '''\n    ## Run Condition:\
      \ GNURadio is starting the flowgraph, resulting output comes from here when\
      \ working\n    top = inspect.currentframe().f_back.f_back.f_locals\n    try:\n\
      \        # Check if top has the variable name we're looking for\n        if\
      \ top.__contains__(variable_name):\n            #print(f\"[Block Debug 1] While\
      \ starting, I found top variable \\'{variable_name}\\': type={type(top[variable_name])},\
      \ value={top[variable_name]}\")\n            return top[variable_name]\n   \
      \ finally:\n        del top\n\n    ## Run Condition: Saving the flowgraph, necessary\
      \ when default case isnt correct\n    top = inspect.currentframe().f_back.f_back.f_back.f_back.f_back.f_locals\n\
      \    try:\n        # Make sure top has 'self'\n        if top.__contains__(\"\
      self\") and \\\n                (isinstance(top['self'], grc.gui.canvas.flowgraph.FlowGraph))\
      \ and \\\n                (hasattr(top['self'], 'blocks')):\n\n            #\
      \ Get a list of all blocks\n            block_names = [block.name for block\
      \ in top['self'].blocks]\n\n            # Find the index to the variable we\
      \ need\n            block_index = block_names.index(variable_name)\n       \
      \     \n            # Return result\n            result = top['self'].blocks[block_index].params['value'].value\n\
      \            print(f\"[Block Debug 2] While modifying the flowgraph, I found\
      \ top variable \\'{variable_name}\\': type={type(result)}, value={result}\"\
      )\n            return result\n\n    finally:\n        del top\n\n    print(\"\
      returining default vaule\")\n    return default"
    affinity: ''
    alias: ''
    comment: 'BBC Requires vectors

      for operation'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('BBC Encoder', 'blk', [], [('0', 'byte', 128)], [('0', 'byte', 131072)],
      '', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [616, 352.0]
    rotation: 0
    state: enabled
- name: epy_block_2_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nE N C O D E R\n\"\"\"\n#import sys\nimport numpy as np\n\
      from gnuradio import gr\nfrom gnuradio import grc\nimport inspect\nDEFAULT_CHECKSUM\
      \ = 0\n\n\n\n\nclass blk(gr.sync_block):\n    \n    def __init__(self):\n  \
      \      msg_len = get_top_variable(\"MESSAGE_LENGTH\", default=2**7)\n      \
      \  cod_len = get_top_variable(\"CODEWORD_LENGTH\", default=2**17)\n        \n\
      \        gr.sync_block.__init__(self,\n            name='BBC Encoder',\n   \
      \         in_sig=[(np.byte,  msg_len if isinstance(msg_len, int) else int(msg_len))],\
      \    \n            out_sig=[(np.byte, cod_len if isinstance(cod_len, int) else\
      \ int(cod_len))]\n        )\n        # Convert from Bytes to bits\n        self.myEncoder\
      \ = Encoder(msg_len*8, cod_len*8)\n    \n    \n    # Use BBC to encode the incoming\
      \ message vectors\n    def work(self, input_items, output_items):\n        result\
      \ = self.myEncoder.encode(input_items[0][:][:])\n        \n        try:\n  \
      \          output_items[0][:][:] = result\n            return len(output_items[0])\n\
      \        except:\n            print(\"DEBUG encoder line 31: output typing failed.\\\
      n\")\n            print(\"Type of encoder result: \", type(result))\n      \
      \      print(\"Type of stream: \", type(self.out_sig))\n    \n###############################################################################\n\
      class Encoder:\n    def __init__(self, msg_len, cod_len):\n        self.shift_register\
      \ = self.init_shift_register()\n        self.msg_len = msg_len\n        self.cod_len\
      \ = cod_len\n\n    def init_shift_register(self):\n        shift_register =\
      \ [0 for i in range(32)]\n        init(shift_register)\n        return (shift_register)\n\
      \n    def parse_input(self, my_input):\n        message = bytearray(my_input.tobytes())\n\
      \        #TODO: add error exception for wrong sized input vector\n        return\
      \ message\n\n    def encode(self, input):\n        message = self.parse_input(input)\n\
      \        codeword = bytearray(int(self.cod_len/8))\n        \n        for i\
      \ in range(self.msg_len):\n            element = memoryview(message)[int((i-i%8)/8)]\n\
      \            bit = ((element) >> (i%8)) & 0b1\n            mark_loc = add_bit(bit,\
      \ self.shift_register) % self.cod_len\n            memoryview(codeword)[int((mark_loc-mark_loc%8)/8)]\
      \ |= (1<<(mark_loc%8))\n            # TODO: add + vs | change to python library\n\
      \        return(codeword)\n        \n ##############################################################################\n\
      MAX_VAL = 0xffffffffffffffff\nglobal n\nn = 0       \ndef add_bit(b, s):\n \
      \   global n\n    t = (s[n % 32]^(0xffffffff if b else 0)) &MAX_VAL\n    t =\
      \ ((t|(t>>1)) ^ ((t<<1)&MAX_VAL))&MAX_VAL     # Have to enforce 64 bit condition\
      \ on left shift     \n    t = (t ^ (t>>4) ^ (t>>8) ^ (t>>16) ^ (t>>32)) & MAX_VAL\n\
      \    n += 1                           \n    s[n % 32] ^= (t&MAX_VAL)  #s[(n)\
      \ % 32] ^= t, modified to reflect n change\n    return s[n % 32]        #return\
      \ s[(n) % 32], modified to reflect n change                      \n\ndef del_bit(b,\
      \ s):\n    global n\n    n -= 1\n    add_bit(b,s), \n    n -= 1\n    return\
      \ s[n % 32]\n    \ndef init(s):\n    global n\n    n = 0\n    h = 1\n    for\
      \ i in range(32):\n        s[i]=0\n    for i in range(4096):\n        h=add_bit(h&1,\
      \ s)\n    n = 0    \n###############################################################################\n\
      \ndef get_top_variable(variable_name=\"\", default=None):\n    '''\n    Returns\
      \ the value of a variable from the flow graph.\n    '''\n    ## Run Condition:\
      \ GNURadio is starting the flowgraph, resulting output comes from here when\
      \ working\n    top = inspect.currentframe().f_back.f_back.f_locals\n    try:\n\
      \        # Check if top has the variable name we're looking for\n        if\
      \ top.__contains__(variable_name):\n            #print(f\"[Block Debug 1] While\
      \ starting, I found top variable \\'{variable_name}\\': type={type(top[variable_name])},\
      \ value={top[variable_name]}\")\n            return top[variable_name]\n   \
      \ finally:\n        del top\n\n    ## Run Condition: Saving the flowgraph, necessary\
      \ when default case isnt correct\n    top = inspect.currentframe().f_back.f_back.f_back.f_back.f_back.f_locals\n\
      \    try:\n        # Make sure top has 'self'\n        if top.__contains__(\"\
      self\") and \\\n                (isinstance(top['self'], grc.gui.canvas.flowgraph.FlowGraph))\
      \ and \\\n                (hasattr(top['self'], 'blocks')):\n\n            #\
      \ Get a list of all blocks\n            block_names = [block.name for block\
      \ in top['self'].blocks]\n\n            # Find the index to the variable we\
      \ need\n            block_index = block_names.index(variable_name)\n       \
      \     \n            # Return result\n            result = top['self'].blocks[block_index].params['value'].value\n\
      \            print(f\"[Block Debug 2] While modifying the flowgraph, I found\
      \ top variable \\'{variable_name}\\': type={type(result)}, value={result}\"\
      )\n            return result\n\n    finally:\n        del top\n\n    print(\"\
      returining default vaule\")\n    return default"
    affinity: ''
    alias: ''
    comment: 'BBC Requires vectors

      for operation'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('BBC Encoder', 'blk', [], [('0', 'byte', 128)], [('0', 'byte', 131072)],
      '', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [608, 208.0]
    rotation: 0
    state: enabled
- name: import_0
  id: import
  parameters:
    alias: ''
    comment: ''
    imports: import glowworm.py
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [512, 12.0]
    rotation: 0
    state: disabled
- name: virtual_sink_1
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: bytes
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1032, 348.0]
    rotation: 0
    state: enabled
- name: virtual_source_0
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: bytes
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 476.0]
    rotation: 0
    state: true
- name: zeromq_push_sink_0
  id: zeromq_push_sink
  parameters:
    address: '"tcp://127.0.0.1:5557"'
    affinity: ''
    alias: ''
    comment: ''
    hwm: '-1'
    pass_tags: 'False'
    timeout: '100'
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1032, 460.0]
    rotation: 0
    state: enabled

connections:
- [blocks_or_xx_0, '0', virtual_sink_1, '0']
- [blocks_stream_to_vector_0, '0', epy_block_2, '0']
- [blocks_stream_to_vector_0_0, '0', epy_block_0, '0']
- [blocks_stream_to_vector_0_1, '0', epy_block_2_0, '0']
- [blocks_throttle_0, '0', blocks_stream_to_vector_0, '0']
- [blocks_throttle_0, '0', blocks_tag_debug_0, '0']
- [blocks_throttle_0_0, '0', blocks_stream_to_vector_0_1, '0']
- [blocks_throttle_0_0, '0', blocks_tag_debug_0_0, '0']
- [blocks_vector_source_x_0_0, '0', blocks_throttle_0, '0']
- [blocks_vector_source_x_0_0_0, '0', blocks_throttle_0_0, '0']
- [blocks_vector_to_stream_1, '0', blocks_or_xx_0, '1']
- [blocks_vector_to_stream_1_0, '0', zeromq_push_sink_0, '0']
- [blocks_vector_to_stream_1_1, '0', blocks_or_xx_0, '0']
- [epy_block_0, '0', blocks_vector_to_stream_1_0, '0']
- [epy_block_2, '0', blocks_vector_to_stream_1, '0']
- [epy_block_2_0, '0', blocks_vector_to_stream_1_1, '0']
- [virtual_source_0, '0', blocks_stream_to_vector_0_0, '0']

metadata:
  file_format: 1
  grc_version: 3.10.3.0
