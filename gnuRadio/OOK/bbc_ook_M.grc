options:
  parameters:
    author: James Morrison
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: no_gui
    hier_block_src_path: '.:'
    id: BBCCodecMaster
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: BBCCodec
    window_size: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: CODEWORD_LENGTH
  id: variable
  parameters:
    comment: 'Must write as int

      Subtract 3 from exponent

      since in Bytes

      131072 = 2**17

      512 = 2**9'
    value: '2'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [192, 12.0]
    rotation: 0
    state: true
- name: MESSAGE_LENGTH
  id: variable
  parameters:
    comment: 'Must write as int

      Subtract 3 from exponent

      since in Bytes

      128 = 2**7

      8 = 2**3'
    value: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [360, 12.0]
    rotation: 0
    state: true
- name: bits_per_pack
  id: variable
  parameters:
    comment: ''
    value: '8'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1096, 16.0]
    rotation: 0
    state: enabled
- name: carrier_freq
  id: variable
  parameters:
    comment: ''
    value: 433.937e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [648, 588.0]
    rotation: 0
    state: enabled
- name: message1
  id: variable
  parameters:
    comment: ''
    value: '"HELLO WORLD! Welcome to BBC in GNURadio. This is a jam-resistant codec,
      and we are sending messages, encoding them, and then try"'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [496, 16.0]
    rotation: 0
    state: disabled
- name: message2
  id: variable
  parameters:
    comment: ''
    value: '"ZELLO ZORLD! Zelcome zo ZBC zn ZNURadio. Zhis zs z zam-zesistant zodec,
      znd ze zre zending zessages, zncoding zhem, znd zhen zry"'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [504, 96.0]
    rotation: 0
    state: disabled
- name: message3
  id: variable
  parameters:
    comment: ''
    value: '"2"'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [672, 16.0]
    rotation: 0
    state: enabled
- name: message4
  id: variable
  parameters:
    comment: ''
    value: '"!"'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [672, 96.0]
    rotation: 0
    state: disabled
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: 128e3
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 128.0]
    rotation: 0
    state: enabled
- name: symbol_rate
  id: variable
  parameters:
    comment: ''
    value: int (500)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [520, 584.0]
    rotation: 0
    state: enabled
- name: analog_sig_source_x_0
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '1'
    comment: ''
    freq: carrier_freq
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    phase: '0'
    samp_rate: samp_rate
    type: complex
    waveform: analog.GR_COS_WAVE
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [776, 536.0]
    rotation: 0
    state: true
- name: band_pass_filter_0
  id: band_pass_filter
  parameters:
    affinity: ''
    alias: ''
    beta: '6.76'
    comment: ''
    decim: '1'
    gain: '1'
    high_cutoff_freq: 50e3
    interp: '1'
    low_cutoff_freq: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
    type: fir_filter_ccc
    width: 20e3
    win: window.WIN_HAMMING
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [184, 660.0]
    rotation: 0
    state: enabled
- name: blocks_complex_to_mag_squared_0
  id: blocks_complex_to_mag_squared
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [384, 720.0]
    rotation: 0
    state: enabled
- name: blocks_float_to_complex_0
  id: blocks_float_to_complex
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [752, 448.0]
    rotation: 0
    state: enabled
- name: blocks_multiply_xx_0
  id: blocks_multiply_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1072, 528.0]
    rotation: 0
    state: true
- name: blocks_or_xx_0
  id: blocks_or_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: byte
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [936, 256.0]
    rotation: 0
    state: disabled
- name: blocks_repeat_0
  id: blocks_repeat
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    interp: int(samp_rate / symbol_rate)
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [512, 516.0]
    rotation: 0
    state: true
- name: blocks_stream_to_vector_0
  id: blocks_stream_to_vector
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: MESSAGE_LENGTH
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [416, 352.0]
    rotation: 0
    state: enabled
- name: blocks_stream_to_vector_0_0
  id: blocks_stream_to_vector
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: CODEWORD_LENGTH
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [424, 880.0]
    rotation: 0
    state: true
- name: blocks_stream_to_vector_0_1
  id: blocks_stream_to_vector
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: MESSAGE_LENGTH
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [432, 248.0]
    rotation: 0
    state: disabled
- name: blocks_tag_debug_0
  id: blocks_tag_debug
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    display: 'True'
    filter: '""'
    name: ''
    num_inputs: '1'
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [432, 408.0]
    rotation: 0
    state: enabled
- name: blocks_tag_debug_0_0
  id: blocks_tag_debug
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    display: 'True'
    filter: '""'
    name: ''
    num_inputs: '1'
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [416, 152.0]
    rotation: 0
    state: disabled
- name: blocks_threshold_ff_0
  id: blocks_threshold_ff
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    high: 1e-3
    init: '0'
    low: 1e-3
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [576, 700.0]
    rotation: 0
    state: enabled
- name: blocks_throttle_0
  id: blocks_throttle
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    ignoretag: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_second: samp_rate
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [216, 348.0]
    rotation: 0
    state: enabled
- name: blocks_throttle_0_0
  id: blocks_throttle
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    ignoretag: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_second: '32000'
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [224, 224.0]
    rotation: 0
    state: disabled
- name: blocks_uchar_to_float_0
  id: blocks_uchar_to_float
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [344, 520.0]
    rotation: 0
    state: enabled
- name: blocks_unpack_k_bits_bb_0
  id: blocks_unpack_k_bits_bb
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    k: bits_per_pack
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [184, 516.0]
    rotation: 0
    state: enabled
- name: blocks_vector_source_x_0_0
  id: blocks_vector_source_x
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    repeat: 'True'
    tags: '[]'
    type: byte
    vector: '[ord(i) for i in message3]'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 332.0]
    rotation: 0
    state: enabled
- name: blocks_vector_source_x_0_0_0
  id: blocks_vector_source_x
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    repeat: 'False'
    tags: '[]'
    type: byte
    vector: '[ord(i) for i in message4]'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 216.0]
    rotation: 0
    state: disabled
- name: blocks_vector_to_stream_1
  id: blocks_vector_to_stream
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: CODEWORD_LENGTH
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [760, 352.0]
    rotation: 0
    state: true
- name: blocks_vector_to_stream_1_0
  id: blocks_vector_to_stream
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: MESSAGE_LENGTH
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [832, 880.0]
    rotation: 0
    state: true
- name: blocks_vector_to_stream_1_1
  id: blocks_vector_to_stream
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: CODEWORD_LENGTH
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [768, 240.0]
    rotation: 0
    state: disabled
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nD E C O D E R\n\"\"\"\n#import sys    #sys.setrecursionlimit((msg_len+1)*8)\
      \    after gr.sync_block.__init__()\nimport numpy as np\nfrom gnuradio import\
      \ gr\nfrom gnuradio import grc\nfrom math import ceil\nimport inspect\nDEFAULT_CHECKSUM\
      \ = 0\n#TODO: REMOVE FIRST HANDLING TO MAKE VERSATILE\nglobal first\nfirst =\
      \ True\n\nclass blk(gr.interp_block):\n\n    def __init__(self): #If there is\
      \ an error, change default here:\n        msg_len = get_top_variable(\"MESSAGE_LENGTH\"\
      , default=1)#2**7)\n        cod_len = get_top_variable(\"CODEWORD_LENGTH\",\
      \ default=2)#2**17)\n        \n        gr.sync_block.__init__(self,\n      \
      \      name='BBC Decoder',\n            in_sig=[(np.byte,  cod_len if isinstance(cod_len,\
      \ int) else int(cod_len))],\n            out_sig=[(np.byte, msg_len if isinstance(msg_len,\
      \ int) else int(msg_len))]\n        )\n        self.set_relative_rate(1)\n \
      \       # Convert from Bytes to bits\n        self.myDecoder = Decoder(msg_len*8,\
      \ cod_len*8, DEFAULT_CHECKSUM) # Bytes to bits\n        #sys.setrecursionlimit((msg_len+1)*8)\n\
      \n    # Use BBC to decode the incoming codeword vectors\n    def work(self,\
      \ input_items, output_items):\n        \n        # Pull packet from the queue\n\
      \        packet = input_items[0][:][0]\n        \n        # Check for a nonzero\
      \ codeword\n        if sum(packet >0):\n            \n            #print(\"\\\
      nDecoder heard codeword \", packet)\n            result = self.myDecoder.decode(packet)\n\
      \            interp = len(result)\n            \n            #Check for a decoded\
      \ message\n            if interp > 0:\n                \n                # Definre\
      \ the number of outputs\n                self.set_relative_rate(interp)\n  \
      \              \n                # Assign outputs iteratively\n            \
      \    for j in range(interp):\n                    try:\n                   \
      \     output_items[0][j][:] = result[j]\n                        print(\"BBC\
      \ decoder found and passed\", result[j])\n                    except:\n    \
      \                        # Decrement the expected output size\n            \
      \                #interp -= 1\n                            print(\"BBC decoder\
      \ found non-ASCII value:\", result[j])\n                #return len(output_items)\
      \ #interp\n        return len(output_items)\n\n###############################################################################\n\
      class Decoder:\n    def __init__(self, MSG_LEN, COD_LEN, CHK_LEN = 0):\n   \
      \     self.message_list = []\n        self.num_checksum = DEFAULT_CHECKSUM\n\
      \        self.shift_register = self.init_shift_register()\n        self.MSG_LEN\
      \ = MSG_LEN\n        self.COD_LEN = COD_LEN\n        self.CHK_LEN = CHK_LEN\
      \ #Is added to MSG_LEN, not subtracted from\n        self.n = 0\n\n    def init_shift_register(self):\n\
      \        shift_register = [0 for i in range(32)]\n        init(shift_register)\n\
      \        return (shift_register)\n\n    #DECODE ITERATIVELY\n    #Note that\
      \   D[n]   is the same as    memoryview(message)[int((self.n - self.n%8)/8)]\n\
      \    def decode(self, packet):\n        # Initialize variables\n        self.message_list\
      \ = []\n        message = bytearray(ceil((self.MSG_LEN + self.CHK_LEN)/8)) \
      \     #Bits to Bytes\n        #memoryview(message)[int((self.n - self.n%8)/8)]\
      \ = 1         # TODO: debug initialization for D[n]\n        \n        while\
      \ True:\n            # Check for mark corresponding to encoding D[n], beginning\
      \ with a 0\n            prop_bit = (memoryview(message)[int((self.n - self.n%8)/8)]>>(self.n%8))\
      \ & 0b1      # Find the proposed bit from previous execution, aka D[n]\n   \
      \         val = (add_bit(prop_bit, self.shift_register) % (self.COD_LEN))  \
      \                # Mark location from glowworm\n            bit = (memoryview(packet)[int((val-val%8)/8)]>>(val%8))\
      \ & 0b1                       # Logical AND to determine if present in packet/codeword\n\
      \n            # If the mark is present... explore\n            if bit==1:\n\
      \                # message is complete, write to buffer\n                if\
      \ self.n == (self.MSG_LEN + self.CHK_LEN - 1):\n                    #print(message)\n\
      \                    valid_msg = bytearray(memoryview(message)[0:self.MSG_LEN\
      \ - 1 - self.num_checksum])\n                    self.message_list.append(bytes(message))\n\
      \                    bit = 0\n                    #TODO: Flow control statement?\n\
      \                    \n                # message is incomplete, continue assuming\
      \ next bit is 0\n                elif self.n < (self.MSG_LEN + self.CHK_LEN\
      \ - 1):\n                    self.n += 1\n                    memoryview(message)[int((self.n\
      \ - self.n%8)/8)] &= (0xff ^ (1<<self.n%8))\n                    continue\n\
      \                # In case something bad happens\n                else:\n  \
      \                  raise Exception(\"107: Message completion led to over-indexing\"\
      )\n\n\n            # If the mark is not present... backtrace\n            #\
      \ Settle on an earlier 0 to change it to a 1 and pursue that tree\n        \
      \    if bit!=1:\n                # delete checksum bits\n                while\
      \ self.n >= self.MSG_LEN: \n                    del_bit(0, self.shift_register)\n\
      \                    self.n -= 1\n                    \n                # delete\
      \ 1's until a 0 is encountered\n                while self.n >=0 and (((memoryview(message)[int((self.n\
      \ - self.n%8)/8)]>>(self.n%8)) & 0b1 )==1):\n                    del_bit(1,\
      \ self.shift_register)\n                    memoryview(message)[int((self.n\
      \ - self.n%8)/8)] &= (0xff ^ (1<<self.n%8))\n                    self.n -= 1\n\
      \                        \n                if self.n < 0: #Packet is fully decoded\n\
      \                    #print(\"BBC Decoder line 116: Packet is fully decoded.\
      \ \")\n                    break #proceed with next packet\n\n             \
      \   else: # Move over to the 1 branch of current search\n                  \
      \  del_bit(0, self.shift_register)\n                    memoryview(message)[int((self.n\
      \ - self.n%8)/8)] |= (1<<self.n%8)\n        #for x in self.message_list:\n \
      \       #    print(\"Non-iterative output: \",x)\n        return self.message_list\n\
      \n###############################################################################\n\
      MAX_VAL = 0xffffffffffffffff\nglobal n\nn = 0       \ndef add_bit(b, s):\n \
      \   global n\n    t = (s[n % 32]^(0xffffffff if b else 0)) &MAX_VAL\n    t =\
      \ ((t|(t>>1)) ^ ((t<<1)&MAX_VAL))&MAX_VAL     # Have to enforce 64 bit condition\
      \ on left shift     \n    t = (t ^ (t>>4) ^ (t>>8) ^ (t>>16) ^ (t>>32)) & MAX_VAL\n\
      \    n += 1                           \n    s[n % 32] ^= (t&MAX_VAL)  #s[(n)\
      \ % 32] ^= t, modified to reflect n change\n    return s[n % 32]    #return\
      \ s[(n) % 32], modified to reflect n change                      \n\ndef del_bit(b,\
      \ s):\n    global n\n    n -= 1\n    add_bit(b,s), \n    n -= 1\n    return\
      \ s[n % 32]\n    \ndef init(s):\n    global n\n    n = 0\n    h = 1\n    for\
      \ i in range(32):\n        s[i]=0\n    for i in range(4096):\n        h=add_bit(h&1,\
      \ s)\n    n = 0    \n\n###############################################################################\n\
      \    \ndef get_top_variable(variable_name=\"\", default=None):\n    '''\n  \
      \  Returns the value of a variable from the flow graph.\n    '''\n    ## Run\
      \ Condition: GNURadio is starting the flowgraph, resulting output comes from\
      \ here when working\n    top = inspect.currentframe().f_back.f_back.f_locals\n\
      \    try:\n        # Check if top has the variable name we're looking for\n\
      \        if top.__contains__(variable_name):\n            #print(f\"[Block Debug\
      \ 1] While starting, I found top variable \\'{variable_name}\\': type={type(top[variable_name])},\
      \ value={top[variable_name]}\")\n            return top[variable_name]\n   \
      \ finally:\n        del top\n        \n    ## Run Condition: Saving the flowgraph,\
      \ necessary when default case isnt correct. Removed return to fix error\n  \
      \  top = inspect.currentframe().f_back.f_back.f_back.f_back.f_back.f_locals\n\
      \    try:\n        # Make sure top has 'self'\n        if top.__contains__(\"\
      self\") and \\\n                (isinstance(top['self'], grc.gui.canvas.flowgraph.FlowGraph))\
      \ and \\\n                (hasattr(top['self'], 'blocks')):\n\n            #\
      \ Get a list of all blocks\n            block_names = [block.name for block\
      \ in top['self'].blocks]\n\n            # Find the index to the variable we\
      \ need\n            block_index = block_names.index(variable_name)\n       \
      \     \n            # Return result\n            result = top[\"self\"].blocks[block_index].params['value'].value\n\
      \            print(result)\n            #print(f\"[Block Debug 2] While modifying\
      \ the flowgraph, I found top variable \\'{variable_name}\\': type={type(result)},\
      \ value={result}\")\n            #return result\n        \n    finally:\n  \
      \      del top\n\n    print(\"returining default vaule\")\n    return default\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('BBC Decoder', 'blk', [], [('0', 'byte', 2)], [('0', 'byte', 1)],
      '', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [624, 880.0]
    rotation: 0
    state: true
- name: epy_block_0_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nOOK Decoder\n\"\"\"\n\nimport numpy as np\nfrom gnuradio\
      \ import gr\n\nclass blk(gr.interp_block):\n\n    def __init__(self, sps=768,clen\
      \ =2**17, dbug=0): \n        gr.sync_block.__init__(\n            self,\n  \
      \          name='OOK Decoder',\n            in_sig=[np.float32],\n         \
      \   out_sig=[np.byte]\n        )\n        # Set the default Interpolation Rate,\
      \ i.e. sync case\n        self.set_relative_rate(1)\n        self.sps = sps\n\
      \        self.dbug = dbug\n        self.clen = clen # to bits from bytes\n \
      \       self.zcount = 0  # Number of samples of zeros\n        self.ocount =\
      \ 0  # Number of samples of ones\n        self.prev_samp =  0\n        self.current_byte\
      \ = '' # will be  string representing bits received\n        self.output_bytes\
      \ = bytearray() # will be the output bytes\n        self.spstol = (np.ceil(0.75*self.sps))\n\
      \        \n    def work(self, input_items, output_items):\n        \n      \
      \  # Initialize output queue\n        output_queue = []\n        \n        #\
      \ Use samples to get bitstream\n        self.read_samples(input_items[0])\n\
      \        \n        # Peel off bytes from the beginning of the queue\n      \
      \  while len(self.current_byte) >= 8:\n            byte = bytes(chr(int(self.current_byte[0:8],2)),'utf-8')\n\
      \            #print(\"Stripped off \", byte)\n            output_queue.append(byte)\n\
      \            self.current_byte = self.current_byte[8:]\n\n\n        # Use interp\
      \ block to output the items\n        interp = len(output_queue)\n        if\
      \ interp > 0:\n            \n            # Definre the number of outputs\n \
      \           self.set_relative_rate(interp)\n            \n            # Assign\
      \ outputs iteratively\n            for j in range(interp):\n               \
      \ try:\n                    print(\"Sent \", output_queue[j])\n            \
      \        output_items[0][j] = output_queue[j]\n                except:\n   \
      \                 print(\"OOK line 58: Failed to asign output... \", output_queue[j],\
      \ \". j=\", j)\n                \n            # Again, return the number of\
      \ outputs\n            return len(output_items[0])\n        # Otherwise, return\
      \ nothing\n        return 0\n            \n    \n    \n    def read_samples(self,\
      \ packet):\n        i = 0\n        for samp in packet:\n            i+=1\n \
      \           # Detect a Change\n            if samp != self.prev_samp:\n    \
      \            if (self.ocount >= self.spstol) or (self.zcount >= self.spstol):\n\
      \                    if self.prev_samp == 1: # look for ones bits\n        \
      \                [obits,omod] = np.divmod(self.ocount,self.sps) # the floor\n\
      \                        if omod >= self.spstol: # if the modulus is more than\
      \ required for a bit, add another bit\n                            obits +=1\n\
      \                        otemp = '1'*int(obits) #JAMES\n                   \
      \     self.current_byte = self.current_byte + otemp #JAMES\n               \
      \     elif self.prev_samp == 0:\n                        [zbits,zmod] = np.divmod(self.zcount,self.sps)\n\
      \                        if zmod >= self.spstol:\n                         \
      \   zbits +=1\n                        ztemp = '0'*int(zbits) #JAMES\n     \
      \                   self.current_byte = self.current_byte + ztemp #JAMES\n \
      \                   self.ocount = 0 # reset the counters\n                 \
      \   self.zcount = 0\n            \n            # Increment respective sample\
      \ counter\n            if samp == 1:\n                self.ocount +=1\n    \
      \        elif samp == 0:\n                self.zcount +=1\n            else:\n\
      \                print(\"incorrect value for sample on index \" + str(i))\n\n\
      \            self.prev_samp = samp # store the previous sample\n"
    affinity: ''
    alias: ''
    clen: CODEWORD_LENGTH
    comment: ''
    dbug: '0'
    maxoutbuf: '0'
    minoutbuf: '0'
    sps: int(samp_rate / symbol_rate)
  states:
    _io_cache: ('OOK Decoder', 'blk', [('sps', '768'), ('clen', '131072'), ('dbug',
      '0')], [('0', 'float', 1)], [('0', 'byte', 1)], '', ['clen', 'dbug', 'sps'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [728, 700.0]
    rotation: 0
    state: true
- name: epy_block_0_0_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nOOK Decoder\n\"\"\"\n\nimport numpy as np\nfrom gnuradio\
      \ import gr\nimport pmt\n\nclass blk(gr.interp_block):\n\n    def __init__(self,\
      \ sps=768,clen =2**17, dbug=0): \n        gr.sync_block.__init__(\n        \
      \    self,\n            name='Work in Progress OOK Decoder',\n            in_sig=[np.float32],\n\
      \            out_sig=[np.byte]\n        )\n        # Set the default Interpolation\
      \ Rate, i.e. sync case\n        self.set_relative_rate(1)\n        # if an attribute\
      \ with the same name as a parameter is found,\n        # a callback is registered\
      \ (properties work, too).\n        self.bit_counter = 0\n        self.sps =\
      \ sps\n        self.dbug = dbug\n        self.clen = clen # to bits from bytes\n\
      \        self.zcount = 0  # Number of samples of zeros\n        self.ocount\
      \ = 0  # Number of samples of ones\n        self.prev_samp =  0\n        self.current_byte\
      \ = bytearray('0x00') # will be  string representing bits received\n       \
      \ self.output_bytes = bytearray() # will be the output bytes\n        self.spstol\
      \ = (np.ceil(0.75*self.sps))\n        \n    def parse_packet(self, packet):\n\
      \        # Initialize loop counter\n        i = 0\n        \n        # Handle\
      \ each sample\n        for samp in packet:\n            i += 1\n           \
      \ \n            # Detect a sample change\n            if (samp != self.prev_samp)\
      \ and (max(self.ocount, self.zcount) >= self.spstol):\n                \n  \
      \              # If we're detecting ones\n                if self.prev_samp\
      \ == 1: \n                    [obits,omod] = np.divmod(self.ocount,self.sps)\
      \ # the floor\n                    if omod >= self.spstol: # if the modulus\
      \ is more than required for a bit, add another bit\n                       \
      \ obits +=1\n                    otemp = '1'*int(obits) #JAMES\n           \
      \         self.bit_counter += obits\n                    self.current_byte =\
      \ self.current_byte + otemp #JAMES\n                    \n                #\
      \ If we're detecing zeros\n                elif self.prev_samp == 0:\n     \
      \               [zbits,zmod] = np.divmod(self.zcount,self.sps)\n           \
      \         if zmod >= self.spstol:\n                        zbits +=1\n     \
      \               self.bit_counter += obits\n                    \n          \
      \          self.current_byte = self.current_byte + ztemp #JAMES\n          \
      \          \n                # Reset the counters\n                self.ocount\
      \ = 0\n                self.zcount = 0\n                \n\n    def work(self,\
      \ input_items, output_items):\n        data = input_items[0]\n        i = 0\
      \ # loop counter\n\n         #main loop\n        for samp in data:\n       \
      \     i+=1\n            # Detect a Change\n            if samp != self.prev_samp:\n\
      \                if (self.ocount >= self.spstol) or (self.zcount >= self.spstol):\n\
      \                    if self.prev_samp == 1: # look for ones bits\n        \
      \                [obits,omod] = np.divmod(self.ocount,self.sps) # the floor\n\
      \                        if omod >= self.spstol: # if the modulus is more than\
      \ required for a bit, add another bit\n                            obits +=1\n\
      \                        otemp = '1'*int(obits) #JAMES\n                   \
      \     self.current_byte = self.current_byte + otemp #JAMES\n               \
      \     elif self.prev_samp == 0:\n                        [zbits,zmod] = np.divmod(self.zcount,self.sps)\n\
      \                        if zmod >= self.spstol:\n                         \
      \   zbits +=1\n                        ztemp = '0'*int(zbits) #JAMES\n     \
      \                   self.current_byte = self.current_byte + ztemp #JAMES\n \
      \                   self.ocount = 0 # reset the counters\n                 \
      \   self.zcount = 0\n            \n            # Increment respective sample\
      \ counter\n            if samp == 1:\n                self.ocount +=1\n    \
      \        elif samp == 0:\n                self.zcount +=1\n            else:\n\
      \                print(\"incorrect value for sample on index \" + str(i))\n\n\
      \            self.prev_samp = samp # store the previous sample\n\n         \
      \   while len(self.current_byte) >= 8:\n                # import pdb\n     \
      \           # pdb.set_trace()\n                if self.dbug == 1:\n        \
      \            print('got a byte')\n                    print(self.current_byte[0:8])\
      \ # only get the first 8 bits\n                self.output_bytes = self.output_bytes\
      \ + bytearray(chr(int(self.current_byte[0:8],2)),'utf-8')\n                #print(\"\
      len of output_bytes is \" + str(len(self.output_bytes)))\n                self.message_port_pub(pmt.intern(self.msgportname),\
      \ pmt.intern(self.current_byte[0:8]))\n                #self.output_bytes =\
      \ self.output_bytes + self.current_byte[0:8]\n                self.current_byte\
      \ = self.current_byte[8:]\n\n        # check to see if the\n        #a = self.output_bytes.find(self.sep)\n\
      \        #if a != -1:\n        # import pdb\n        # pdb.set_trace()\n   \
      \     if len(self.output_bytes) == self.clen:\n            print(\"Found a codeword\"\
      )\n            print(\"current_byte is \" + str(self.current_byte))\n\n    \
      \    #     #print(\"Message found is \" + self.output_bytes[len(self.sep)-1:a])\n\
      \            self.message_port_pub(pmt.intern(self.msgportname), pmt.intern(str(self.output_bytes)))\n\
      \        #     if a == len(self.output_bytes)-1:\n        #         self.output_bytes\
      \ = \"\"\n        #     else:\n        #         self.output_bytes = self.output_bytes[a+len(self.sep):]\n\
      \            output_items[1][:] =  self.output_bytes\n        else:\n      \
      \      print(\"No codeword yet\")\n            #output_items[1][:] = bytearray()\n\
      \        if self.dbug == 1:\n            #print(\"Bytes found are: \" + self.output_bytes)\n\
      \            print(\"Current byte is: \" + self.current_byte)\n#           print(\"\
      Leftover Ocount is: \" + str(self.ocount))\n#           print(\"Leftover Zcount\
      \ is: \" + str(self.zcount))\n\n\n        # just output what we got in\n   \
      \     output_items[0][:] = input_items[0]\n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    clen: CODEWORD_LENGTH
    comment: ''
    dbug: '0'
    maxoutbuf: '0'
    minoutbuf: '0'
    sps: int(samp_rate / symbol_rate)
  states:
    _io_cache: ('OOK Decoder', 'blk', [('sps', '768'), ('clen', '131072'), ('dbug',
      '0')], [('0', 'float', 1)], [('0', 'byte', 1)], '', ['clen', 'dbug', 'sps'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [800, 88.0]
    rotation: 0
    state: disabled
- name: epy_block_1
  id: epy_block
  parameters:
    _source_code: "'''\nOR CODEWORD BLOCK\n'''\nimport numpy as np\nfrom gnuradio\
      \ import gr\nfrom gnuradio import grc\nimport inspect\n\n\nclass blk(gr.sync_block):\n\
      \n    def __init__(self):  # only default arguments here\n        cod_len =\
      \ get_top_variable(\"CODEWORD_LENGTH\", default=2**17)\n        \n        gr.sync_block.__init__(self,\n\
      \            name='OR Codeword',\n            in_sig=[(np.ubyte,  cod_len if\
      \ isinstance(cod_len, int) else int(cod_len)), \n                    (np.ubyte,\
      \  cod_len if isinstance(cod_len, int) else int(cod_len))],    #[np.complex64],\n\
      \            out_sig=[(np.ubyte, cod_len if isinstance(cod_len, int) else int(cod_len))]\n\
      \        )\n\n\n    def work(self, input_items, output_items):\n        #print(input_items[0][0])\
      \ gives list without extra binder\n        #print(input_items[1])  gives list\
      \ with extra binder\n        result = self.combine_codewords([input_items[1][0],\
      \ input_items[0][0]]) #output defaults to first argument, here.\n        #print(result)\n\
      \        print(\"Assigning result\")\n        print(result[37])\n        #output_items[0][:]\
      \ = input_items[0]    WORKS. Same error if input_items[0][0]\n        output_items[0][:]\
      \ = list(result)\n        print(\"final step\")\n        #return len(output_items[0])\
      \            WORKS\n        return len(output_items[0])\n\n    def combine_codewords(self,\
      \ words):\n        result = 0\n        #print(type(words[0][0][0]))\n      \
      \  print(\"decoding 0\")\n        cw1 = int.from_bytes(words[0],\"little\")\n\
      \        print(\"decoding 1\")\n        cw2 = int.from_bytes(words[1],\"little\"\
      )\n        #for x in words:\n        #    result |= int.from_bytes(x,\"little\"\
      )\n        print(\"combining...\")\n        result = cw1 |cw2\n        print(\"\
      encoding...\")\n        result = cw1.to_bytes(len(words[0]),\"little\")#result.to_bytes(len(words[0]),\"\
      little\")\n        print(\"returning...\")\n        return result\n\n\n###############################################################################\n\
      \ndef get_top_variable(variable_name=\"\", default=None):\n    '''\n    Returns\
      \ the value of a variable from the flow graph.\n    '''\n    ## Run Condition:\
      \ GNURadio is starting the flowgraph, resulting output comes from here when\
      \ working\n    top = inspect.currentframe().f_back.f_back.f_locals\n    try:\n\
      \        # Check if top has the variable name we're looking for\n        if\
      \ top.__contains__(variable_name):\n            #print(f\"[Block Debug 1] While\
      \ starting, I found top variable \\'{variable_name}\\': type={type(top[variable_name])},\
      \ value={top[variable_name]}\")\n            return top[variable_name]\n   \
      \ finally:\n        del top\n\n    ## Run Condition: Saving the flowgraph, necessary\
      \ when default case isnt correct\n    top = inspect.currentframe().f_back.f_back.f_back.f_back.f_back.f_locals\n\
      \    try:\n        # Make sure top has 'self'\n        if top.__contains__(\"\
      self\") and \\\n                (isinstance(top['self'], grc.gui.canvas.flowgraph.FlowGraph))\
      \ and \\\n                (hasattr(top['self'], 'blocks')):\n\n            #\
      \ Get a list of all blocks\n            block_names = [block.name for block\
      \ in top['self'].blocks]\n\n            # Find the index to the variable we\
      \ need\n            block_index = block_names.index(variable_name)\n       \
      \     \n            # Return result\n            result = top['self'].blocks[block_index].params['value'].value\n\
      \            print(f\"[Block Debug 2] While modifying the flowgraph, I found\
      \ top variable \\'{variable_name}\\': type={type(result)}, value={result}\"\
      )\n            return result\n\n    finally:\n        del top\n\n    print(\"\
      returining default vaule\")\n    return default"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('OR Codeword', 'blk', [], [('0', 'byte', 2), ('1', 'byte', 2)], [('0',
      'byte', 2)], '', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [968, 16.0]
    rotation: 0
    state: disabled
- name: epy_block_2
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nE N C O D E R\n\"\"\"\n#import sys\nimport numpy as np\n\
      from gnuradio import gr\nfrom gnuradio import grc\nimport inspect\nDEFAULT_CHECKSUM\
      \ = 0\n\n\n\n\nclass blk(gr.sync_block):\n    \n    def __init__(self):\n  \
      \      msg_len = get_top_variable(\"MESSAGE_LENGTH\", default=2**7)\n      \
      \  cod_len = get_top_variable(\"CODEWORD_LENGTH\", default=2**17)\n        \n\
      \        gr.sync_block.__init__(self,\n            name='BBC Encoder',\n   \
      \         in_sig=[(np.byte,  msg_len if isinstance(msg_len, int) else int(msg_len))],\
      \    \n            out_sig=[(np.byte, cod_len if isinstance(cod_len, int) else\
      \ int(cod_len))]\n        )\n        # Convert from Bytes to bits\n        self.myEncoder\
      \ = Encoder(msg_len*8, cod_len*8)\n    \n    \n    # Use BBC to encode the incoming\
      \ message vectors\n    def work(self, input_items, output_items):\n        result\
      \ = self.myEncoder.encode(input_items[0][:])\n        #print(\"2 encoded: \"\
      , result)\n        \n        try:\n            output_items[0][:] = result\n\
      \            return len(output_items[0])\n        except:\n            print(\"\
      DEBUG encoder line 31: output typing failed.\\n\")\n            print(\"Type\
      \ of encoder result: \", type(result))\n            print(\"Type of stream:\
      \ \", type(self.out_sig))\n    \n###############################################################################\n\
      class Encoder:\n    def __init__(self, msg_len, cod_len):\n        self.shift_register\
      \ = self.init_shift_register()\n        self.msg_len = msg_len\n        self.cod_len\
      \ = cod_len\n\n    def init_shift_register(self):\n        shift_register =\
      \ [0 for i in range(32)]\n        init(shift_register)\n        return (shift_register)\n\
      \n    def parse_input(self, my_input):\n        message = bytearray(my_input.tobytes())\n\
      \        #TODO: add error exception for wrong sized input vector\n        return\
      \ message\n\n    def encode(self, input):\n        message = self.parse_input(input)\n\
      \        codeword = bytearray(int(self.cod_len/8))\n        \n        for i\
      \ in range(self.msg_len):\n            element = memoryview(message)[int((i-i%8)/8)]\n\
      \            bit = ((element) >> (i%8)) & 0b1\n            mark_loc = add_bit(bit,\
      \ self.shift_register) % self.cod_len\n            #print(mark_loc)\n      \
      \      memoryview(codeword)[int((mark_loc-mark_loc%8)/8)] |= (1<<(mark_loc%8))\n\
      \            # TODO: add + vs | change to python library\n        return(codeword)\n\
      \        \n ##############################################################################\n\
      MAX_VAL = 0xffffffffffffffff\nglobal n\nn = 0       \ndef add_bit(b, s):\n \
      \   global n\n    t = (s[n % 32]^(0xffffffff if b else 0)) &MAX_VAL\n    t =\
      \ ((t|(t>>1)) ^ ((t<<1)&MAX_VAL))&MAX_VAL     # Have to enforce 64 bit condition\
      \ on left shift     \n    t = (t ^ (t>>4) ^ (t>>8) ^ (t>>16) ^ (t>>32)) & MAX_VAL\n\
      \    n += 1                           \n    s[n % 32] ^= (t&MAX_VAL)  #s[(n)\
      \ % 32] ^= t, modified to reflect n change\n    return s[n % 32]        #return\
      \ s[(n) % 32], modified to reflect n change                      \n\ndef del_bit(b,\
      \ s):\n    global n\n    n -= 1\n    add_bit(b,s), \n    n -= 1\n    return\
      \ s[n % 32]\n    \ndef init(s):\n    global n\n    n = 0\n    h = 1\n    for\
      \ i in range(32):\n        s[i]=0\n    for i in range(4096):\n        h=add_bit(h&1,\
      \ s)\n    n = 0    \n###############################################################################\n\
      \ndef get_top_variable(variable_name=\"\", default=None):\n    '''\n    Returns\
      \ the value of a variable from the flow graph.\n    '''\n    ## Run Condition:\
      \ GNURadio is starting the flowgraph, resulting output comes from here when\
      \ working\n    top = inspect.currentframe().f_back.f_back.f_locals\n    try:\n\
      \        # Check if top has the variable name we're looking for\n        if\
      \ top.__contains__(variable_name):\n            #print(f\"[Block Debug 1] While\
      \ starting, I found top variable \\'{variable_name}\\': type={type(top[variable_name])},\
      \ value={top[variable_name]}\")\n            return top[variable_name]\n   \
      \ finally:\n        del top\n\n    ## Run Condition: Saving the flowgraph, necessary\
      \ when default case isnt correct\n    top = inspect.currentframe().f_back.f_back.f_back.f_back.f_back.f_locals\n\
      \    try:\n        # Make sure top has 'self'\n        if top.__contains__(\"\
      self\") and \\\n                (isinstance(top['self'], grc.gui.canvas.flowgraph.FlowGraph))\
      \ and \\\n                (hasattr(top['self'], 'blocks')):\n\n            #\
      \ Get a list of all blocks\n            block_names = [block.name for block\
      \ in top['self'].blocks]\n\n            # Find the index to the variable we\
      \ need\n            block_index = block_names.index(variable_name)\n       \
      \     \n            # Return result\n            result = top['self'].blocks[block_index].params['value'].value\n\
      \            print(f\"[Block Debug 2] While modifying the flowgraph, I found\
      \ top variable \\'{variable_name}\\': type={type(result)}, value={result}\"\
      )\n            return result\n\n    finally:\n        del top\n\n    print(\"\
      returining default vaule\")\n    return default\n"
    affinity: ''
    alias: ''
    comment: 'BBC Requires vectors

      for operation'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('BBC Encoder', 'blk', [], [('0', 'byte', 1)], [('0', 'byte', 2)],
      '', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [616, 352.0]
    rotation: 0
    state: enabled
- name: epy_block_2_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nE N C O D E R\n\"\"\"\n#import sys\nimport numpy as np\n\
      from gnuradio import gr\nfrom gnuradio import grc\nimport inspect\nDEFAULT_CHECKSUM\
      \ = 0\n\n\n\n\nclass blk(gr.sync_block):\n    \n    def __init__(self):\n  \
      \      msg_len = get_top_variable(\"MESSAGE_LENGTH\", default=2**7)\n      \
      \  cod_len = get_top_variable(\"CODEWORD_LENGTH\", default=2**17)\n        \n\
      \        gr.sync_block.__init__(self,\n            name='BBC Encoder',\n   \
      \         in_sig=[(np.byte,  msg_len if isinstance(msg_len, int) else int(msg_len))],\
      \    \n            out_sig=[(np.byte, cod_len if isinstance(cod_len, int) else\
      \ int(cod_len))]\n        )\n        # Convert from Bytes to bits\n        self.myEncoder\
      \ = Encoder(msg_len*8, cod_len*8)\n    \n    \n    # Use BBC to encode the incoming\
      \ message vectors\n    def work(self, input_items, output_items):\n        result\
      \ = self.myEncoder.encode(input_items[0][:][:])\n        \n        try:\n  \
      \          output_items[0][:][:] = result\n            return len(output_items[0])\n\
      \        except:\n            print(\"DEBUG encoder line 31: output typing failed.\\\
      n\")\n            print(\"Type of encoder result: \", type(result))\n      \
      \      print(\"Type of stream: \", type(self.out_sig))\n    \n###############################################################################\n\
      class Encoder:\n    def __init__(self, msg_len, cod_len):\n        self.shift_register\
      \ = self.init_shift_register()\n        self.msg_len = msg_len\n        self.cod_len\
      \ = cod_len\n\n    def init_shift_register(self):\n        shift_register =\
      \ [0 for i in range(32)]\n        init(shift_register)\n        return (shift_register)\n\
      \n    def parse_input(self, my_input):\n        message = bytearray(my_input.tobytes())\n\
      \        #TODO: add error exception for wrong sized input vector\n        return\
      \ message\n\n    def encode(self, input):\n        message = self.parse_input(input)\n\
      \        codeword = bytearray(int(self.cod_len/8))\n        \n        for i\
      \ in range(self.msg_len):\n            element = memoryview(message)[int((i-i%8)/8)]\n\
      \            bit = ((element) >> (i%8)) & 0b1\n            mark_loc = add_bit(bit,\
      \ self.shift_register) % self.cod_len\n            memoryview(codeword)[int((mark_loc-mark_loc%8)/8)]\
      \ |= (1<<(mark_loc%8))\n            # TODO: add + vs | change to python library\n\
      \        return(codeword)\n        \n ##############################################################################\n\
      MAX_VAL = 0xffffffffffffffff\nglobal n\nn = 0       \ndef add_bit(b, s):\n \
      \   global n\n    t = (s[n % 32]^(0xffffffff if b else 0)) &MAX_VAL\n    t =\
      \ ((t|(t>>1)) ^ ((t<<1)&MAX_VAL))&MAX_VAL     # Have to enforce 64 bit condition\
      \ on left shift     \n    t = (t ^ (t>>4) ^ (t>>8) ^ (t>>16) ^ (t>>32)) & MAX_VAL\n\
      \    n += 1                           \n    s[n % 32] ^= (t&MAX_VAL)  #s[(n)\
      \ % 32] ^= t, modified to reflect n change\n    return s[n % 32]        #return\
      \ s[(n) % 32], modified to reflect n change                      \n\ndef del_bit(b,\
      \ s):\n    global n\n    n -= 1\n    add_bit(b,s), \n    n -= 1\n    return\
      \ s[n % 32]\n    \ndef init(s):\n    global n\n    n = 0\n    h = 1\n    for\
      \ i in range(32):\n        s[i]=0\n    for i in range(4096):\n        h=add_bit(h&1,\
      \ s)\n    n = 0    \n###############################################################################\n\
      \ndef get_top_variable(variable_name=\"\", default=None):\n    '''\n    Returns\
      \ the value of a variable from the flow graph.\n    '''\n    ## Run Condition:\
      \ GNURadio is starting the flowgraph, resulting output comes from here when\
      \ working\n    top = inspect.currentframe().f_back.f_back.f_locals\n    try:\n\
      \        # Check if top has the variable name we're looking for\n        if\
      \ top.__contains__(variable_name):\n            #print(f\"[Block Debug 1] While\
      \ starting, I found top variable \\'{variable_name}\\': type={type(top[variable_name])},\
      \ value={top[variable_name]}\")\n            return top[variable_name]\n   \
      \ finally:\n        del top\n\n    ## Run Condition: Saving the flowgraph, necessary\
      \ when default case isnt correct\n    top = inspect.currentframe().f_back.f_back.f_back.f_back.f_back.f_locals\n\
      \    try:\n        # Make sure top has 'self'\n        if top.__contains__(\"\
      self\") and \\\n                (isinstance(top['self'], grc.gui.canvas.flowgraph.FlowGraph))\
      \ and \\\n                (hasattr(top['self'], 'blocks')):\n\n            #\
      \ Get a list of all blocks\n            block_names = [block.name for block\
      \ in top['self'].blocks]\n\n            # Find the index to the variable we\
      \ need\n            block_index = block_names.index(variable_name)\n       \
      \     \n            # Return result\n            result = top['self'].blocks[block_index].params['value'].value\n\
      \            print(f\"[Block Debug 2] While modifying the flowgraph, I found\
      \ top variable \\'{variable_name}\\': type={type(result)}, value={result}\"\
      )\n            return result\n\n    finally:\n        del top\n\n    print(\"\
      returining default vaule\")\n    return default\n"
    affinity: ''
    alias: ''
    comment: 'BBC Requires vectors

      for operation'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('BBC Encoder', 'blk', [], [('0', 'byte', 1)], [('0', 'byte', 2)],
      '', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [632, 240.0]
    rotation: 0
    state: disabled
- name: import_0
  id: import
  parameters:
    alias: ''
    comment: ''
    imports: import glowworm.py
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [784, 16.0]
    rotation: 0
    state: disabled
- name: virtual_sink_0
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: tx_rx
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1200, 528.0]
    rotation: 0
    state: true
- name: virtual_sink_1
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: bytes
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1032, 348.0]
    rotation: 0
    state: enabled
- name: virtual_sink_1_0
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: demod
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [968, 716.0]
    rotation: 0
    state: enabled
- name: virtual_source_0
  id: virtual_source
  parameters:
    alias: ''
    comment: Start BBC Decode
    stream_id: demod
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [16, 876.0]
    rotation: 0
    state: true
- name: virtual_source_0_0
  id: virtual_source
  parameters:
    alias: ''
    comment: Start Modulation
    stream_id: bytes
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [16, 516.0]
    rotation: 0
    state: true
- name: virtual_source_0_1
  id: virtual_source
  parameters:
    alias: ''
    comment: Start Demodulation
    stream_id: tx_rx
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [16, 716.0]
    rotation: 0
    state: true
- name: zeromq_push_sink_0
  id: zeromq_push_sink
  parameters:
    address: '"tcp://127.0.0.1:5557"'
    affinity: ''
    alias: ''
    comment: ''
    hwm: '-1'
    pass_tags: 'False'
    timeout: '100'
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1040, 860.0]
    rotation: 0
    state: enabled

connections:
- [analog_sig_source_x_0, '0', blocks_multiply_xx_0, '1']
- [band_pass_filter_0, '0', blocks_complex_to_mag_squared_0, '0']
- [blocks_complex_to_mag_squared_0, '0', blocks_threshold_ff_0, '0']
- [blocks_float_to_complex_0, '0', blocks_multiply_xx_0, '0']
- [blocks_multiply_xx_0, '0', virtual_sink_0, '0']
- [blocks_or_xx_0, '0', virtual_sink_1, '0']
- [blocks_repeat_0, '0', blocks_float_to_complex_0, '0']
- [blocks_stream_to_vector_0, '0', epy_block_2, '0']
- [blocks_stream_to_vector_0_0, '0', epy_block_0, '0']
- [blocks_stream_to_vector_0_1, '0', epy_block_2_0, '0']
- [blocks_threshold_ff_0, '0', epy_block_0_0, '0']
- [blocks_throttle_0, '0', blocks_stream_to_vector_0, '0']
- [blocks_throttle_0, '0', blocks_tag_debug_0, '0']
- [blocks_throttle_0_0, '0', blocks_stream_to_vector_0_1, '0']
- [blocks_throttle_0_0, '0', blocks_tag_debug_0_0, '0']
- [blocks_uchar_to_float_0, '0', blocks_repeat_0, '0']
- [blocks_unpack_k_bits_bb_0, '0', blocks_uchar_to_float_0, '0']
- [blocks_vector_source_x_0_0, '0', blocks_throttle_0, '0']
- [blocks_vector_source_x_0_0_0, '0', blocks_throttle_0_0, '0']
- [blocks_vector_to_stream_1, '0', blocks_or_xx_0, '1']
- [blocks_vector_to_stream_1, '0', virtual_sink_1, '0']
- [blocks_vector_to_stream_1_0, '0', zeromq_push_sink_0, '0']
- [blocks_vector_to_stream_1_1, '0', blocks_or_xx_0, '0']
- [epy_block_0, '0', blocks_vector_to_stream_1_0, '0']
- [epy_block_0_0, '0', virtual_sink_1_0, '0']
- [epy_block_2, '0', blocks_vector_to_stream_1, '0']
- [epy_block_2_0, '0', blocks_vector_to_stream_1_1, '0']
- [virtual_source_0, '0', blocks_stream_to_vector_0_0, '0']
- [virtual_source_0_0, '0', blocks_unpack_k_bits_bb_0, '0']
- [virtual_source_0_1, '0', band_pass_filter_0, '0']

metadata:
  file_format: 1
  grc_version: 3.10.3.0
